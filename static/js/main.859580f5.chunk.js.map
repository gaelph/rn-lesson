{"version":3,"sources":["components/Menu.js","pages/Home.js","components/BottomButtons.js","pages/SpecificComponents/index.js","components/Playground.js","pages/SpecificComponents/View.js","pages/SpecificComponents/Text.js","pages/SpecificComponents/Image.js","pages/SpecificComponents/TextInput.js","pages/SpecificComponents/Button.js","pages/SpecificComponents/Touchables.js","pages/SpecificComponents/Lists.js","pages/ReactHooks/index.js","pages/ReactHooks/UseState.js","App.js","reportWebVitals.js","index.js"],"names":["L","to","label","children","Menu","className","Home","_props","BottomButtons","backTo","backLabel","nextTo","nextLabel","SpecificComponents","CustomPlayground","props","style","with","height","marginTop","marginBottom","preset","panes","type","scale","width","ViewAndStyleSheet","code","files","TextPage","ImagePage","href","ButtonPage","TouchablesPage","ListsPages","ReactHooks","UseState","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.859580f5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction L({ to, label, children }) {\n\treturn (\n\t\t<li>\n\t\t\t<Link to={to}>{label}</Link>\n\t\t\t{children && <ol>{children}</ol>}\n\t\t</li>\n\t);\n}\n\nexport default function Menu() {\n\treturn (\n\t\t<div className=\"menu\">\n\t\t\t<Link to=\"/\">\n\t\t\t\t<h5>Vite, React-Native&nbsp;!</h5>\n\t\t\t</Link>\n\t\t\t<ol>\n\t\t\t\t<L to=\"/specific-components\" label=\"Composants Spécifiques\">\n\t\t\t\t\t<L to=\"/specific-components/view\" label={\"<View /> et StyleSheet\"} />\n\t\t\t\t\t<L to=\"/specific-components/text\" label={\"<Text />\"} />\n\t\t\t\t\t<L to=\"/specific-components/image\" label={\"<Image />\"} />\n\t\t\t\t\t<L to=\"/specific-components/text-input\" label={\"<TextInput />\"} />\n\t\t\t\t\t<L to=\"/specific-components/button\" label={\"<Button />\"} />\n\t\t\t\t\t<L to=\"/specific-components/touchables\" label={\"Touchables\"} />\n\t\t\t\t\t<L to=\"/specific-components/lists\" label={\"Listes\"} />\n\t\t\t\t</L>\n\t\t\t\t<L to=\"/react-hooks\" label=\"React… avec les hooks !\">\n\t\t\t\t\t<L to=\"/react-hooks/usestate\" label=\"useState()\" />\n\t\t\t\t\t<L to=\"/react-hooks/useeffect\" label=\"useEffect()\" />\n\t\t\t\t\t<L to=\"/react-hooks/usecallback\" label=\"useCallback()\" />\n\t\t\t\t\t<L to=\"/react-hooks/useref\" label=\"useRef()\" />\n\t\t\t\t\t<L to=\"/react-hooks/usememo\" label=\"useMemo()\" />\n\t\t\t\t\t<L to=\"/react-hooks/usereducer\" label=\"useReducer()\" />\n\t\t\t\t</L>\n\t\t\t\t<L to=\"/application-development\" label=\"Développement d’applications\">\n\t\t\t\t\t<L\n\t\t\t\t\t\tto=\"/application-development/project-structure\"\n\t\t\t\t\t\tlabel=\"Structures de projets\"\n\t\t\t\t\t/>\n\t\t\t\t\t<L to=\"/application-development/navigation\" label=\"Navigation\" />\n\t\t\t\t\t<L\n\t\t\t\t\t\tto=\"/application-development/state-management\"\n\t\t\t\t\t\tlabel=\"État global et persistance\"\n\t\t\t\t\t/>\n\t\t\t\t\t<L to=\"/application-development/animations\" label=\"Animations\" />\n\t\t\t\t\t<L to=\"/application-development/sensors\" label=\"Capteurs\" />\n\t\t\t\t</L>\n\t\t\t</ol>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nexport default function Home(_props) {\n\treturn <h1>Vite, React-Native&nbsp;!</h1>;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function BottomButtons({\n\tbackTo,\n\tbackLabel,\n\tnextTo,\n\tnextLabel,\n}) {\n\treturn (\n\t\t<div className=\"w-full flex justify-between pt-8\">\n\t\t\t<Link to={backTo} className=\"button back\">\n\t\t\t\t{backLabel}\n\t\t\t</Link>\n\t\t\t<Link to={nextTo} className=\"button next\">\n\t\t\t\t{nextLabel}\n\t\t\t</Link>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function SpecificComponents() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>Composants Spécifiques</h1>\n\n\t\t\t<h2>Les briques de base</h2>\n\n\t\t\t<p>\n\t\t\t\tDans le monde de React Native, il n’y a pas de DOM à proprement parler.\n\t\t\t\tPas de <span className=\"code\">div</span>,{\" \"}\n\t\t\t\t<span className=\"code\">span</span>, ni de{\" \"}\n\t\t\t\t<span className=\"code\">ul</span> ou de <span className=\"code\">li</span>.\n\t\t\t\tCedendant, React Native inclus quelques composants de base prêts à\n\t\t\t\tl’emploi. Comme avec React, ces composants peuvent combinés pour\n\t\t\t\tconstruire des composants plus complexes.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tPresque tous les composants de base étandent le composant{\" \"}\n\t\t\t\t<span className=\"code\">View</span>, et acceptent une prop optionnelle{\" \"}\n\t\t\t\t<span className=\"code\">style</span>. Comme le CSS dans un navigateur, le\n\t\t\t\tstyle comprends aussi bien des propriétés d’apparence, comme les bordure\n\t\t\t\tet les couleurs, que des propriétés de mise en page. Il s’agit d’un\n\t\t\t\tsous-ensemble du CSS qui utilie l’algorithme « flexbox ».\n\t\t\t</p>\n\n\t\t\t<p>Voyons à quoi ça ressemble dans des exemples concrets.</p>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/\"\n\t\t\t\tbackLabel=\"Vite, React Native\"\n\t\t\t\tnextTo=\"/specific-components/view\"\n\t\t\t\tnextLabel=\"<View /> et StyleSheet\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport Playground from \"javascript-playgrounds\";\n\nexport default function CustomPlayground(props) {\n\treturn (\n\t\t<Playground\n\t\t\tstyle={{ with: 800, height: 600, marginTop: 16, marginBottom: 16 }}\n\t\t\tpreset=\"react-native\"\n\t\t\tpanes={[\n\t\t\t\t\"editor\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"player\",\n\t\t\t\t\tscale: 0.8,\n\t\t\t\t\twidth: 300,\n\t\t\t\t},\n\t\t\t]}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ViewAndStyleSheet() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>{\"<View />\"} et StyleSheet</h1>\n\t\t\t<h2>Le composant {\"<View />\"}</h2>\n\t\t\t<p>\n\t\t\t\tLes <span className=\"code\">View</span> sont les briques les plus\n\t\t\t\tbasiques de React Native. Il s’agit d’une façade pour l’équivalent natif\n\t\t\t\tde la plateforme cible&nbsp;:\n\t\t\t</p>\n\t\t\t<ul>\n\t\t\t\t<li>Pour iOS - UIView</li>\n\t\t\t\t<li>Pour Android - android.view</li>\n\t\t\t\t<li>Pour Web - {\"<div />\"}</li>\n\t\t\t</ul>\n\t\t\t<p>\n\t\t\t\tLes <span className=\"code\">View</span> sont principalement utilisées\n\t\t\t\tpour styliser et positionner leurs éléments enfants.\n\t\t\t\t<br />\n\t\t\t\tL’exemple ci-dessous a deux <span className=\"code\">View</span>&nbsp;:\n\t\t\t\tl’élément extérieur spécifie l’alignement de celui contenu à\n\t\t\t\tl’intérieur&nbsp;; l’élément intérieur dessine un carré bleu.\n\t\t\t</p>\n\t\t\t<Playground\n\t\t\t\tcode={`import React from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box} />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  box: {\n    width: 150,\n    height: 150,\n    backgroundColor: '#3B6CD4',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 4,\n  },\n})\n      `}\n\t\t\t/>\n\t\t\t<h2 className=\"mt-8\">Styles et mise en page</h2>\n\t\t\t<blockquote>\n\t\t\t\tLes styles sont généralement définis dans le même fichier que le\n\t\t\t\tcomposant qui les utilise, via{\" \"}\n\t\t\t\t<span className=\"code\">StyleSheet.create()</span>.\n\t\t\t</blockquote>\n\t\t\t<p>\n\t\t\t\tLes composants spécifient la disposition de leurs enfants en utilisant\n\t\t\t\tl’algorithme flexbox. Il permet de déclarer des vues qui s’étandent ou\n\t\t\t\tqui s’étrécissent pour remplir des écrans de différentes dimensions. On\n\t\t\t\tpeut mélanger à sa guise ces éléments qui s’ajustent automatiquement\n\t\t\t\tavec des éléments à taille fixe comme{\" \"}\n\t\t\t\t<span className=\"code\">width: 100</span>.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tPour choisir le « layout » pour les composants enfants, nous avons à\n\t\t\t\tfaire 3 choix&nbsp;:\n\t\t\t</p>\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Propriété</th> <th>Défaut</th> <th>Options</th>{\" \"}\n\t\t\t\t\t\t<th>Description</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">flexDirection</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">column</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">row</span>,{\" \"}\n\t\t\t\t\t\t\t<span className=\"code\">column</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\tOn veut une disposition vertical (column) or horizontale (\n\t\t\t\t\t\t\trow)&nbsp;? Ce choix détermine l’axe principal du layout.\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">justifyContent</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">flex-start</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">flex-start</span>,{\" \"}\n\t\t\t\t\t\t\t<span className=\"code\">center</span>,{\" \"}\n\t\t\t\t\t\t\t<span className=\"code\">flex-end</span>,\n\t\t\t\t\t\t\t<span className=\"code\">space-around</span>,{\" \"}\n\t\t\t\t\t\t\t<span className=\"code\">space-between</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\tComment le contenu doit-il être distrbué le long de l’axe\n\t\t\t\t\t\t\tprincipal&nbsp;? Au début, au centre, à la fin, en répartissant\n\t\t\t\t\t\t\tl’espace&nbsp;?\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">alignItems</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">stretch</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<span className=\"code\">flex-start</span>,{\" \"}\n\t\t\t\t\t\t\t<span className=\"code\">center</span>,{\" \"}\n\t\t\t\t\t\t\t<span className=\"code\">flex-end</span>,{\" \"}\n\t\t\t\t\t\t\t<span className=\"code\">stretch</span>\n\t\t\t\t\t\t</td>{\" \"}\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\tComment le contenun doit être aligné le long de l’axe\n\t\t\t\t\t\t\tsecondaire&nbsp;? (Si l’axe principal est «&nbsp;row&nbsp;», le\n\t\t\t\t\t\t\tsecondaire est «&nbsp;column&nbsp;», et vice-versa) Le contenu\n\t\t\t\t\t\t\tdoit-il être aligne au début, au centre, à la fin ou étiré pour\n\t\t\t\t\t\t\tremplir son parent&nbsp;?\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\n\t\t\t<p>\n\t\t\t\tL’exemple suivant vous permet d’essayer les difféentes combinaisons.\n\t\t\t</p>\n\n\t\t\t<Playground\n\t\t\t\tfiles={{\n\t\t\t\t\t\"App.js\": `import React, { useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nimport Toggle from './Toggle'\n\nexport default function App() {\n  const [flexDirection, setFlexDirection] = useState('row')\n  const [justifyContent, setJustifyContent] = useState('center')\n  const [alignItems, setAlignItems] = useState('center')\n  const layoutStyle = { flexDirection, justifyContent, alignItems }\n\n  const primaryAxis = flexDirection === 'row' ? 'Horizontal' : 'Vertical'\n  const secondaryAxis = flexDirection === 'row' ? 'Vertical' : 'Horizontal'\n\n  return (\n    <View style={styles.container}>\n      <Toggle\n        label={'Axe principal (flexDirection)'}\n        value={flexDirection}\n        options={flexDirectionOptions}\n        onChange={(option) => {\n          setFlexDirection(option)\n        }}\n      />\n      <Toggle\n        label={\\`Distribution \\${primaryAxis.toLowerCase()}e (justifyContent)\\`}\n        value={justifyContent}\n        options={justifyContentOptions}\n        onChange={(option) => {\n          setJustifyContent(option)\n        }}\n      />\n      <Toggle\n        label={\\`Alignement \\${secondaryAxis.toLowerCase()} (alignItems)\\`}\n        value={alignItems}\n        options={alignItemsOptions}\n        onChange={(option) => {\n          setAlignItems(option)\n        }}\n      />\n      <View style={[styles.layout, layoutStyle]}>\n        <View style={styles.box} />\n        <View style={styles.box} />\n        <View style={styles.box} />\n      </View>\n    </View>\n  )\n}\n\nconst flexDirectionOptions = ['row', 'column']\nconst justifyContentOptions = [\n  'flex-start',\n  'center',\n  'flex-end',\n  'space-around',\n  'space-between',\n]\nconst alignItemsOptions = ['flex-start', 'center', 'flex-end', 'stretch']\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  layout: {\n    flex: 1,\n    backgroundColor: 'rgba(0,0,0,0.05)',\n  },\n  box: {\n    padding: 25,\n    backgroundColor: '#3B6CD4',\n    margin: 5,\n  },\n})\n`,\n\t\t\t\t\t\"Toggle.js\": `import React from 'react'\nimport { View, Text, Button, StyleSheet } from 'react-native'\n\nexport default function Toggle({ label, options, value, onChange }) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.label}>{label}</Text>\n      <View style={styles.optionsContainer}>\n        {options.map((option) => (\n          <Button\n            color={option === value ? '#3B6CD4' : '#AAA'}\n            onPress={() => onChange(option)}\n            title={option}\n            key={option}\n          />\n        ))}\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    paddingBottom: 12,\n  },\n  label: {\n    fontSize: 14,\n    padding: 4,\n  },\n  optionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n})\n`,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components\"\n\t\t\t\tbackLabel=\"Composants Spécifiques\"\n\t\t\t\tnextTo=\"/specific-components/text\"\n\t\t\t\tnextLabel=\"<Text />\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function TextPage() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>{\"<Text />\"}</h1>\n\t\t\t{/* <h2>Le composant {\"<View />\"}</h2> */}\n\t\t\t<p>\n\t\t\t\t<span className=\"code\">Text</span> est utilisé pour afficher du texte.\n\t\t\t\tContrairement à ce qu’on a l’habitude de voir dans le navigateur, tout\n\t\t\t\ttexte doit être «&nbsp;emballé&nbsp;» dans un composant{\" \"}\n\t\t\t\t<span className=\"code\">{\"<Text />\"}</span>.\n\t\t\t</p>\n\t\t\t<Playground\n\t\t\t\tcode={`import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Hello!</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    backgroundColor: 'whitesmoke',\n    color: '#4A90E2',\n    fontSize: 24,\n    padding: 10,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/view\"\n\t\t\t\tbackLabel=\"<View /> et StyleSheet\"\n\t\t\t\tnextTo=\"/specific-components/image\"\n\t\t\t\tnextLabel=\"<Image />\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ImagePage() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>{\"<Image />\"}</h1>\n\t\t\t{/* <h2>Le composant {\"<View />\"}</h2> */}\n\t\t\t<p>\n\t\t\t\t<span className=\"code\">Image</span> est utilisé pour afficher des\n\t\t\t\timages. Les images peuvent être téléchargées dynamiquement ou importées\n\t\t\t\tcomme des fichiers, qui seront embarqués avec l’application.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tPour embarquer une image dans l’application, importez le fichier en\n\t\t\t\tindiquant son chemin, avec l’extension. Qu’on soit sur Android ou iOS,\n\t\t\t\tle même fichier sera utilsé. En écrivant{\" \"}\n\t\t\t\t<span className=\"code\">import './test.png' </span>, le fichier le plus\n\t\t\t\tapproprié pour la taille de l’appareil sera choisi parmi&nbsp;:{\" \"}\n\t\t\t\t<span className=\"code\">test.png</span>,{\" \"}\n\t\t\t\t<span className=\"code\">test@2x.png</span>, or{\" \"}\n\t\t\t\t<span className=\"code\">test@3x.png</span>.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tLa mise en page pour les images téléchargées et les images embalquées.\n\t\t\t</p>\n\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<strong>Images embarquées&nbsp;:</strong> le fichier est analysé à la\n\t\t\t\t\tcompilation et les dimensions sont incluses dans les métadonnées de\n\t\t\t\t\tl’application. Les dimensions du composant{\" \"}\n\t\t\t\t\t<span className=\"code\">Image</span> sont donc celle de l’image par\n\t\t\t\t\tdéfaut&nbsp;;\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<strong>Images téléchargées&nbsp;:</strong> les dimensions ne sont pas\n\t\t\t\t\tconnues à la compilation, donc elles sont à 0 par défaut. Pour que\n\t\t\t\t\tl’image puisse s’afficher à l’écran, nous devons indiquer la hauteur\n\t\t\t\t\tet la largeur (en dur, ou via flexbox).\n\t\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React from 'react'\nimport { Image, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <Image\n      style={styles.image}\n      source={{ uri: 'https://picsum.photos/200' }}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 200,\n    height: 200,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/text\"\n\t\t\t\tbackLabel=\"<Text />\"\n\t\t\t\tnextTo=\"/specific-components/text-input\"\n\t\t\t\tnextLabel=\"<TextInput />\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ImagePage() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>{\"<TextInput />\"}</h1>\n\t\t\t{/* <h2>Le composant {\"<View />\"}</h2> */}\n\n\t\t\t<p>\n\t\t\t\tUne exemple de saisie utilisateur. <br />\n\t\t\t\tLe composant <span className=\"code\">{\"<TextInput />\"}</span> est très\n\t\t\t\triche et offre de nombreuses possibilités pour formater, valider la\n\t\t\t\tsaisie, choisir le type de clavier virtuel à afficher, etc.\n\t\t\t\t<br />\n\t\t\t\tLa liste complète des props est disponible sur{\" \"}\n\t\t\t\t<a href=\"https://reactnative.dev/docs/textinput\">\n\t\t\t\t\tla documentation offcielle de React Native\n\t\t\t\t</a>\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tSon fonctionnement n’est pas très diffétent d’un{\" \"}\n\t\t\t\t<span className=\"code\">{\"<input />\"}</span> du navigateur. On utilise un\n\t\t\t\tétat, <span className=\"code\">text</span>, pour conserver la valeur\n\t\t\t\tcourante du champ. On passe text au{\" \"}\n\t\t\t\t<span className=\"code\">TextInput</span> dans la prop value, et à chaque\n\t\t\t\tfois que <span className=\"code\">onChangeText()</span>\n\t\t\t\tsera appelée, on mettra l’état à jour en appelant{\" \"}\n\t\t\t\t<span className=\"code\">setText()</span>.\n\t\t\t</p>\n\n\t\t\t<blockquote>\n\t\t\t\tNous utilisons le hook <span className=\"code\">useState</span> pour\n\t\t\t\tstocker la valeur. On le traite dans un autre chapitre.\n\t\t\t</blockquote>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React, { useState } from 'react'\nimport { View, Text, TextInput } from 'react-native'\n\nexport default function App() {\n  const [text, setText] = useState('')\n\n  return (\n    <View>\n      <TextInput\n        value={text}\n        style={{ fontSize: 42, color: 'steelblue' }}\n        placeholder=\"Votre texte ici…\"\n        onChangeText={(text) => {\n          setText(text)\n        }}\n      />\n      <Text style={{ fontSize: 24 }}>\n        Vous avez écrit : {text}\n      </Text>\n    </View>\n  )\n}\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/image\"\n\t\t\t\tbackLabel=\"<Image />\"\n\t\t\t\tnextTo=\"/specific-components/button\"\n\t\t\t\tnextLabel=\"<Button />\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ButtonPage() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>{\"<Button />\"}</h1>\n\t\t\t{/* <h2>Le composant {\"<View />\"}</h2> */}\n\n\t\t\t<p>\n\t\t\t\tLe composant <span className=\"code\">{\"<Button />\"}</span> permet\n\t\t\t\td’affiche un bouton en utilisant les styles natifs de chaque plateforme.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tSe ce composant est pratique, il n’est pas très configurable. Si vous\n\t\t\t\tvoulez changer le style au-delà de la couleur de fond, vous utilierez\n\t\t\t\tplutôt des composants Touchable.\n\t\t\t</p>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React, { useState } from 'react'\nimport { Button, StyleSheet, Text, View } from 'react-native'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={'Pressez moi!'}\n        onPress={() => {\n          setCount(count + 1)\n        }}\n      />\n      <Text style={styles.text}>{\\`Pressé \\${count} fois\\`}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 18,\n    padding: 12,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/text-input\"\n\t\t\t\tbackLabel=\"<TextInput />\"\n\t\t\t\tnextTo=\"/specific-components/touchables\"\n\t\t\t\tnextLabel=\"Touchables\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function TouchablesPage() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>Touchables</h1>\n\t\t\t<h2>Touchable Opacity</h2>\n\n\t\t\t<p>\n\t\t\t\tQuand l’utilisateur touche ce composant, son opacité est réduite,\n\t\t\t\tjusqu’à ce qu’il soit relaché.\n\t\t\t\t<br />\n\t\t\t\tIl peut être stylisé, disposé via{\" \"}\n\t\t\t\t<span className=\"code\">StyleSheet</span>, comme une{\" \"}\n\t\t\t\t<span className=\"code\">View</span>.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tL’opacité peut-être configurée via la prop{\" \"}\n\t\t\t\t<span className=\"code\">activeOpacity</span>\n\t\t\t</p>\n\n\t\t\t<blockquote>\n\t\t\t\tC’est le type de bouton le plus commun dans une application React\n\t\t\t\tNative.\n\t\t\t</blockquote>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React, { useState } from 'react'\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        style={styles.button}\n        activeOpacity={0.7}\n        onPress={() => {\n          setCount(count + 1)\n        }}\n      >\n        <Text style={styles.text}>Appuyez-moi dessus !</Text>\n      </TouchableOpacity>\n      <Text style={styles.text}>{\\`Appuyé \\${count} fois\\`}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    padding: 40,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: 'green',\n    backgroundColor: 'lightgreen',\n  },\n  text: {\n    fontSize: 18,\n    padding: 12,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<h2 className=\"mt-6\">Touchable Highlight</h2>\n\n\t\t\t<p>La couleur de ce composant change quand on appuie dessus.</p>\n\n\t\t\t<p>\n\t\t\t\tCette couleur peut être configurée avec la prop{\" \"}\n\t\t\t\t<span className=\"code\">underlayColor</span>\n\t\t\t</p>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React, { useState } from 'react'\nimport { StyleSheet, Text, TouchableHighlight, View } from 'react-native'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <View style={styles.container}>\n      <TouchableHighlight\n        style={styles.button}\n        underlayColor=\"#FAB\"\n        onPress={() => {\n          setCount(count + 1)\n        }}\n      >\n        <Text style={styles.text}>Appuyez-moi !</Text>\n      </TouchableHighlight>\n      <Text style={styles.text}>{\\`Appuyé \\${count} fois\\`}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    padding: 40,\n    borderRadius: 4,\n    backgroundColor: '#F88',\n  },\n  text: {\n    fontSize: 18,\n    padding: 12,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/button\"\n\t\t\t\tbackLabel=\"<Button />\"\n\t\t\t\tnextTo=\"/specific-components/lists\"\n\t\t\t\tnextLabel=\"Lists\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ListsPages() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>Listes</h1>\n\t\t\t<h2>Scroll View</h2>\n\n\t\t\t<p>\n\t\t\t\tLes <span className=\"code\">ScrollView</span> permettent permettent\n\t\t\t\td’avoir une surface scrollable, autant verticalement que\n\t\t\t\thorizontalement. <br />\n\t\t\t\tElles offrent beaucoup de possibilités de customization,{\" \"}\n\t\t\t\t<a href=\"https://reactnative.dev/docs/scrollview\">\n\t\t\t\t\t(voir la documentation offcielle)\n\t\t\t\t</a>{\" \"}\n\t\t\t\tmais pour de meilleurs performances, on préfèrera els{\" \"}\n\t\t\t\t<span className=\"code\">FlatList</span> et{\" \"}\n\t\t\t\t<span className=\"code\">SectionList</span>.\n\t\t\t</p>\n\n\t\t\t<h2>Flat List</h2>\n\n\t\t\t<p>\n\t\t\t\tLes <span className=\"code\">FlatList</span> sont utilisées pour les grand\n\t\t\t\tquantité de contenu scrollable (c.f. Twitter ou Tumblr). Elles ont les\n\t\t\t\tmêmes props que\n\t\t\t\t<span className=\"code\">ScrollView</span> dont elles héritent, mais avec\n\t\t\t\tdes performances accrues&nbsp;: seul le contenu visible à l’écran est\n\t\t\t\trendu, et seules les rangées nécessitant une mise à jour sont\n\t\t\t\tre-rendues.\n\t\t\t\t<br />\n\t\t\t\tElls peuvent être scrollées horizontalement ou verticalement.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tElles ne rendent pas leur enfants, mais utilsent la prop{\" \"}\n\t\t\t\t<span className=\"code\">renderItem</span>. Celle-ci est une fonction qui\n\t\t\t\tprend comme paramètre un élément du tableau{\" \"}\n\t\t\t\t<span className=\"code\">data</span>, et retourne un Element React.\n\t\t\t\t<br />\n\t\t\t\tChaque élément du tableau <span className=\"code\">data</span> doit avoir\n\t\t\t\tun identifiant unique pour que React puisse déterminer les\n\t\t\t\tréarrangements. Par défaut, React utilise{\" \"}\n\t\t\t\t<span className=\"code\">item.key</span>, mais ça peut être configuré avec\n\t\t\t\tla prop <span className=\"code\">keyExtractor</span>.\n\t\t\t</p>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React from 'react'\nimport { FlatList, StyleSheet, Text } from 'react-native'\n\nconst items = [\n  { id: '0', text: 'View' },\n  { id: '1', text: 'Text' },\n  { id: '2', text: 'Image' },\n  { id: '3', text: 'ScrollView' },\n  { id: '4', text: 'ListView' },\n]\n\nexport default function App() {\n  return (\n    <FlatList\n      style={styles.container}\n      data={items}\n      renderItem={({ item }) => <Text style={styles.row}>{item.text}</Text>}\n      keyExtractor={(item) => item.id}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  row: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'skyblue',\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<h2 className=\"mt-6\">Section List</h2>\n\n\t\t\t<p>\n\t\t\t\tLes <span className=\"code\">SectionList</span> sont comme les{\" \"}\n\t\t\t\t<span className=\"code\">FlatList</span>, mais peuvent avoir des entêtes\n\t\t\t\tde section et des groupes de rangés distincts.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t<span className=\"code\">SectionList</span> rend chaque élément du tableau\n\t\t\t\tpassé en prop <span className=\"code\">sections</span> en utilisant les\n\t\t\t\tprops <span className=\"code\">renderSectionHeader</span> et{\" \"}\n\t\t\t\t<span className=\"code\">renderItem</span>. Chaque élément de{\" \"}\n\t\t\t\t<span className=\"code\">sections</span> doit être un objet avec un\n\t\t\t\tidentifiant unique, un tableau <span className=\"code\">data</span>{\" \"}\n\t\t\t\tcontenant les données. Chaque élément de{\" \"}\n\t\t\t\t<span className=\"code\">data</span> doit également avoir son identifiant\n\t\t\t\tunique.\n\t\t\t\t<br />\n\t\t\t\tSi la prop <span className=\"code\">renderItem</span> fonctionne comme\n\t\t\t\tpour <span className=\"code\">FlatList</span>,{\" \"}\n\t\t\t\t<span className=\"code\">renderSectionHeader</span> prend un élément de{\" \"}\n\t\t\t\t<span className=\"code\">sections</span> comme paramètre.\n\t\t\t</p>\n\n\t\t\t<h3>Exemple avec la même renderItem pour toutes les sections</h3>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React from 'react'\nimport { SectionList, StyleSheet, Text } from 'react-native'\n\nconst sections = [\n  {\n    id: '0',\n    title: 'Basic Components',\n    data: [\n      { id: '0', text: 'View' },\n      { id: '1', text: 'Text' },\n      { id: '2', text: 'Image' },\n    ],\n  },\n  {\n    id: '1',\n    title: 'List Components',\n    data: [\n      { id: '3', text: 'ScrollView' },\n      { id: '4', text: 'ListView' },\n    ],\n  },\n]\n\nexport default function App() {\n  return (\n    <SectionList\n      style={styles.container}\n      sections={sections}\n      renderItem={({ item }) => <Text style={styles.row}>{item.text}</Text>}\n      renderSectionHeader={({ section }) => (\n        <Text style={styles.header}>{section.title}</Text>\n      )}\n      keyExtractor={(item) => item.id}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  row: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'skyblue',\n  },\n  header: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'steelblue',\n    color: 'white',\n    fontWeight: 'bold',\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<h3>Exemple avec une renderItem par section</h3>\n\n\t\t\t<p>\n\t\t\t\tUne fonction <span className=\"code\">renderItem</span> peut être\n\t\t\t\tspécifiée dans le tableau <span className=\"code\">sections</span>, une\n\t\t\t\tpar section, au lieu d’une prop de{\" \"}\n\t\t\t\t<span className=\"code\">SectionList</span>. Chaque section peut être\n\t\t\t\trendue différamment. Une alternative serait d’utiliser les données des\n\t\t\t\téléments des <span className=\"code\">data</span> pour rendre chaque\n\t\t\t\télément différamment.\n\t\t\t</p>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React from 'react'\nimport { SectionList, StyleSheet, Text } from 'react-native'\n\nconst sections = [\n  {\n    id: '0',\n    title: 'Basic Components',\n    data: [\n      { id: '0', text: 'View' },\n      { id: '1', text: 'Text' },\n      { id: '2', text: 'Image' },\n    ],\n    renderItem: ({ item }) => {\n      return <Text style={styles.row}>{item.text}</Text>\n    },\n  },\n  {\n    id: '1',\n    title: 'List Components',\n    data: [\n      { id: '3', text: 'ScrollView' },\n      { id: '4', text: 'ListView' },\n    ],\n    renderItem: ({ item }) => <Text style={styles.rowDark}>{item.text}</Text>,\n  },\n]\n\nexport default function App() {\n  return (\n    <SectionList\n      style={styles.container}\n      sections={sections}\n      renderSectionHeader={({ section }) => {\n        return <Text style={styles.header}>{section.title}</Text>\n      }}\n      keyExtractor={(item) => item.id}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  row: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'skyblue',\n  },\n  rowDark: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'steelblue',\n  },\n  header: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'darkblue',\n    color: 'white',\n    fontWeight: 'bold',\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/touchables\"\n\t\t\t\tbackLabel=\"Touchables\"\n\t\t\t\tnextTo=\"/react-hooks\"\n\t\t\t\tnextLabel=\"React… avec les hooks !\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ReactHooks() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>React… avec les hooks&nbsp;!</h1>\n\n\t\t\t<p>\n\t\t\t\tCette section est plus un rappel, pour ceux qui se seraient déjà\n\t\t\t\tfrotté·e·s aux fameux hooks de React, ou une succincte introduction pour\n\t\t\t\tles autres.\n\t\t\t</p>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/lists\"\n\t\t\t\tbackLabel=\"Listes\"\n\t\t\t\tnextTo=\"/react-hooks/usestate\"\n\t\t\t\tnextLabel=\"useState()\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function UseState() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>{\"useState()\"}</h1>\n\t\t\t{/* <h2>Le composant {\"<View />\"}</h2> */}\n\t\t\t<p>\n\t\t\t\t<span className=\"code\">Text</span> est utilisé pour afficher du texte.\n\t\t\t\tContrairement à ce qu’on a l’habitude de voir dans le navigateur, tout\n\t\t\t\ttexte doit être «&nbsp;emballé&nbsp;» dans un composant{\" \"}\n\t\t\t\t<span className=\"code\">{\"<Text />\"}</span>.\n\t\t\t</p>\n\t\t\t<Playground\n\t\t\t\tcode={`import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Hello!</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    backgroundColor: 'whitesmoke',\n    color: '#4A90E2',\n    fontSize: 24,\n    padding: 10,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/view\"\n\t\t\t\tbackLabel=\"<View /> et StyleSheet\"\n\t\t\t\tnextTo=\"/specific-components/image\"\n\t\t\t\tnextLabel=\"<Image />\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Menu from \"./components/Menu\";\n\nimport Home from \"./pages/Home\";\n\nimport SpecificComponents from \"./pages/SpecificComponents\";\nimport ViewAndStyleSheet from \"./pages/SpecificComponents/View\";\nimport Text from \"./pages/SpecificComponents/Text\";\nimport Image from \"./pages/SpecificComponents/Image\";\nimport TextInput from \"./pages/SpecificComponents/TextInput\";\nimport Button from \"./pages/SpecificComponents/Button\";\nimport Touchables from \"./pages/SpecificComponents/Touchables\";\nimport Lists from \"./pages/SpecificComponents/Lists\";\n\nimport ReactHooks from \"./pages/ReactHooks\";\nimport UseState from \"./pages/ReactHooks/UseState\";\nimport UseEffect from \"./pages/ReactHooks/UseEffect\";\nimport UseCallback from \"./pages/ReactHooks/UseCallback\";\nimport UseRef from \"./pages/ReactHooks/UseRef\";\nimport UseMemo from \"./pages/ReactHooks/UseMemo\";\nimport UseReducer from \"./pages/ReactHooks/UseReducer\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"flex App\">\n\t\t\t<Router>\n\t\t\t\t<Menu />\n\t\t\t\t<div className=\"w-5/6 p-16 px-48\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" exact>\n\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t{/* Specific Components */}\n\t\t\t\t\t\t<Route exact path=\"/specific-components\">\n\t\t\t\t\t\t\t<SpecificComponents />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/specific-components/view\">\n\t\t\t\t\t\t\t<ViewAndStyleSheet />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/specific-components/text\">\n\t\t\t\t\t\t\t<Text />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/specific-components/image\">\n\t\t\t\t\t\t\t<Image />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/specific-components/text-input\">\n\t\t\t\t\t\t\t<TextInput />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/specific-components/button\">\n\t\t\t\t\t\t\t<Button />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/specific-components/touchables\">\n\t\t\t\t\t\t\t<Touchables />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/specific-components/lists\">\n\t\t\t\t\t\t\t<Lists />\n\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t{/* React Hooks */}\n\t\t\t\t\t\t<Route exact path=\"/react-hooks\">\n\t\t\t\t\t\t\t<ReactHooks />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/react-hooks/usestate\">\n\t\t\t\t\t\t\t<UseState />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/react-hooks/useeffect\">\n\t\t\t\t\t\t\t<UseEffect />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/react-hooks/usecallback\">\n\t\t\t\t\t\t\t<UseCallback />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/react-hooks/useref\">\n\t\t\t\t\t\t\t<UseRef />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/react-hooks/usememo\">\n\t\t\t\t\t\t\t<UseMemo />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/react-hooks/usereducer\">\n\t\t\t\t\t\t\t<UseReducer />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}