{"version":3,"sources":["components/Menu.js","components/BottomButtons.js","pages/Home.js","pages/Environment.js","pages/SpecificComponents/index.js","components/Playground.js","pages/SpecificComponents/View.js","pages/SpecificComponents/Text.js","pages/SpecificComponents/Image.js","pages/SpecificComponents/TextInput.js","pages/SpecificComponents/Button.js","pages/SpecificComponents/Touchables.js","pages/SpecificComponents/Lists.js","pages/ReactHooks/index.js","pages/ReactHooks/UseState.js","pages/ReactHooks/UseEffect.js","pages/ReactHooks/UseRef.js","pages/ReactHooks/Others.js","pages/ReactHooks/Custom.js","pages/ApplicationDeveloppement/index.js","pages/ApplicationDeveloppement/ProjectStructure.js","pages/ApplicationDeveloppement/AndroidAndiOS.js","pages/ApplicationDeveloppement/Navigation.js","pages/ApplicationDeveloppement/State.js","pages/ApplicationDeveloppement/Animations.js","pages/ApplicationDeveloppement/Sensors.js","pages/ApplicationDeveloppement/Permissions.js","pages/WhatYoullDo.js","App.js","reportWebVitals.js","index.js"],"names":["L","to","label","children","Menu","className","BottomButtons","backTo","backLabel","nextTo","nextLabel","Home","_props","Environment","href","taget","rel","target","SpecificComponents","CustomPlayground","props","noPlayer","width","height","panes","type","scale","style","with","marginTop","marginBottom","preset","ViewAndStyleSheet","code","files","TextPage","ImagePage","ButtonPage","TouchablesPage","ListsPages","ReactHooks","UseState","UseEffect","UseRef","ApplicationDeveloppement","ProjectStructure","Geoloc","Navigation","State","Animations","clasName","Sensors","WhatYoullDo","src","process","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0775892f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction L({ to, label, children }) {\n  return (\n    <li>\n      <Link to={to}>{label}</Link>\n      {children && <ol>{children}</ol>}\n    </li>\n  );\n}\n\nexport default function Menu() {\n  return (\n    <div className=\"menu\">\n      <Link to=\"/\">\n        <h5>Vite, React-Native&nbsp;!</h5>\n      </Link>\n      <ol>\n        <L to=\"/environment\" label=\"Environment\" />\n        <L to=\"/specific-components\" label=\"Composants Spécifiques\">\n          <L to=\"/specific-components/view\" label={\"<View /> et StyleSheet\"} />\n          <L to=\"/specific-components/text\" label={\"<Text />\"} />\n          <L to=\"/specific-components/image\" label={\"<Image />\"} />\n          <L to=\"/specific-components/text-input\" label={\"<TextInput />\"} />\n          <L to=\"/specific-components/button\" label={\"<Button />\"} />\n          <L to=\"/specific-components/touchables\" label={\"Touchables\"} />\n          <L to=\"/specific-components/lists\" label={\"Listes\"} />\n        </L>\n        <L to=\"/react-hooks\" label=\"React… avec les hooks !\">\n          <L to=\"/react-hooks/usestate\" label=\"useState()\" />\n          <L to=\"/react-hooks/useeffect\" label=\"useEffect()\" />\n          <L to=\"/react-hooks/useref\" label=\"useRef()\" />\n          <L to=\"/react-hooks/others\" label=\"Autres hooks\" />\n          <L to=\"/react-hooks/custom\" label=\"Hooks custom\" />\n        </L>\n        <L to=\"/application-development\" label=\"Développement d’applications\">\n          <L\n            to=\"/application-development/project-structure\"\n            label=\"Structures de projets\"\n          />\n          <L\n            to=\"/application-development/android-and-ios\"\n            label=\"Android et iOS\"\n          />\n          <L to=\"/application-development/navigation\" label=\"Navigation\" />\n          <L\n            to=\"/application-development/state\"\n            label=\"État global et persistance\"\n          />\n          <L to=\"/application-development/animations\" label=\"Animations\" />\n          <L to=\"/application-development/sensors\" label=\"Capteurs\" />\n          <L to=\"/application-development/permissions\" label=\"Permissions\" />\n        </L>\n\n        <L to=\"/what-you-ll-do\" label=\"Ce que vous allez faire\" />\n      </ol>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function BottomButtons({\n  backTo,\n  backLabel,\n  nextTo,\n  nextLabel,\n}) {\n  return (\n    <div className=\"w-full flex justify-between pt-8\">\n      <Link to={backTo} className=\"button back\">\n        {backLabel}\n      </Link>\n      {nextTo && (\n        <Link to={nextTo} className=\"button next\">\n          {nextLabel}\n        </Link>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport BottomButtons from \"../components/BottomButtons\";\n\nexport default function Home(_props) {\n  return (\n    <div className=\"w-full\">\n      <h1>Vite, React-Native&nbsp;!</h1>\n\n      <BottomButtons\n        backTo=\"/\"\n        backLabel=\"Vite, React Native\"\n        nextTo=\"/environment\"\n        nextLabel=\"Environment\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport BottomButtons from \"../components/BottomButtons\";\n\nexport default function Environment() {\n  return (\n    <div className=\"w-full\">\n      <h1>Environment</h1>\n\n      <p>Il y a deux façon courantes de commencer un projet React Native</p>\n\n      <h2>\n        <a href=\"https://docs.expo.io\" taget=\"_blank\" rel=\"noreferrer\">\n          Expo\n        </a>\n      </h2>\n\n      <p>\n        C’est un utilitaire qui permet de configurer et publier rapidement un\n        projet React Native. Probablement la meilleure option pour commencer.\n        <br />\n        Qui plus est, Expo fourni de nombreuses librairies (maintenues et à\n        jour) pour interagir avec les appareils mobile.\n      </p>\n\n      <p>\n        Expo se propose même de compiler les binaires et de packager les\n        appliactions pour vous. Vous pouvez donc compiler une application iOS\n        sans Mac — mais pas le tester, donc ce n’est pas recommandé… <br />\n        Avec un compte gratuit, l’attente peut être longue avant d’avoir votre\n        APK/APP.\n      </p>\n\n      <p>\n        L’inconvénient, c’est tous les modules développés pour React Native ne\n        sont nécessairement compatible avec Expo, et qu’il n’est pas possible de\n        coder les siens. Il est cependant possible de commencer un projet avec\n        Expo, puis d’« éjecter » si nécessaire.\n      </p>\n\n      <p>\n        Un autre point à retenir est que la partie JavaScript de l’application\n        est hébergée par Expo sur Amazon S3. Ça peut ne pas plaire à votre\n        client de savoir que son application et son code source est en accès\n        public.\n      </p>\n\n      <h2>\n        <a\n          href=\"https://www.npmjs.com/package/react-native\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          React Native\n        </a>\n      </h2>\n\n      <p>\n        Si vous devez développer vos propres modules, ou avez besoin de modules\n        incompatible avec Expo, il est toujours possible de démarrer votre\n        développement avec la CLI de React Native.\n      </p>\n\n      <p>\n        Vous devrez compiler localement (pas de file d’attente), mais il vous\n        faudra un Mac pour iOS.\n        <br />\n        Le bundle js est embarqué avec l’application.\n        <br />\n        Vous pouvez installer tous les modules conçus pour React Native.\n      </p>\n\n      <BottomButtons\n        backTo=\"/\"\n        backLabel=\"Vite, React Native\"\n        nextTo=\"/specific-components\"\n        nextLabel=\"Composants Spécifiques\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function SpecificComponents() {\n  return (\n    <div className=\"w-full\">\n      <h1>Composants Spécifiques</h1>\n\n      <h2>Les briques de base</h2>\n\n      <p>\n        Dans le monde de React Native, il n’y a pas de DOM à proprement parler.\n        Pas de <span className=\"code\">div</span>,{\" \"}\n        <span className=\"code\">span</span>, ni de{\" \"}\n        <span className=\"code\">ul</span> ou de <span className=\"code\">li</span>.\n        Cedendant, React Native inclus quelques composants de base prêts à\n        l’emploi. Comme avec React, ces composants peuvent combinés pour\n        construire des composants plus complexes.\n      </p>\n\n      <p>\n        Presque tous les composants de base étandent le composant{\" \"}\n        <span className=\"code\">View</span>, et acceptent une prop optionnelle{\" \"}\n        <span className=\"code\">style</span>. Comme le CSS dans un navigateur, le\n        style comprends aussi bien des propriétés d’apparence, comme les bordure\n        et les couleurs, que des propriétés de mise en page. Il s’agit d’un\n        sous-ensemble du CSS qui utilie l’algorithme «&nbsp;flexbox&nbsp;».\n      </p>\n\n      <p>Voyons à quoi ça ressemble dans des exemples concrets.</p>\n\n      <BottomButtons\n        backTo=\"/\"\n        backLabel=\"Vite, React Native\"\n        nextTo=\"/specific-components/view\"\n        nextLabel=\"<View /> et StyleSheet\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Playground from \"javascript-playgrounds\";\n\nexport default function CustomPlayground(props) {\n  const { noPlayer, width, height } = props;\n  let panes = [\n    \"editor\",\n    {\n      type: \"player\",\n      scale: 0.8,\n      width: 300,\n    },\n  ];\n\n  if (noPlayer) {\n    panes = [\"editor\"];\n  }\n\n  return (\n    <Playground\n      style={{\n        with: width || 800,\n        height: height || 600,\n        marginTop: 16,\n        marginBottom: 16,\n      }}\n      preset=\"react-native\"\n      panes={panes}\n      {...props}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ViewAndStyleSheet() {\n  return (\n    <div className=\"w-full\">\n      <h1>{\"<View />\"} et StyleSheet</h1>\n      <h2>Le composant {\"<View />\"}</h2>\n      <p>\n        Les <span className=\"code\">View</span> sont les briques les plus\n        basiques de React Native. Il s’agit d’une façade pour l’équivalent natif\n        de la plateforme cible&nbsp;:\n      </p>\n      <ul>\n        <li>Pour iOS - UIView</li>\n        <li>Pour Android - android.view</li>\n        <li>Pour Web - {\"<div />\"}</li>\n      </ul>\n      <p>\n        Les <span className=\"code\">View</span> sont principalement utilisées\n        pour styliser et positionner leurs éléments enfants.\n        <br />\n        L’exemple ci-dessous a deux <span className=\"code\">View</span>&nbsp;:\n        l’élément extérieur spécifie l’alignement de celui contenu à\n        l’intérieur&nbsp;; l’élément intérieur dessine un carré bleu.\n      </p>\n      <Playground\n        code={`import React from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box} />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  box: {\n    width: 150,\n    height: 150,\n    backgroundColor: '#3B6CD4',\n    borderWidth: 1,\n    borderColor: 'black',\n    borderRadius: 4,\n  },\n})\n      `}\n      />\n      <h2 className=\"mt-8\">Styles et mise en page</h2>\n      <blockquote>\n        Les styles sont généralement définis dans le même fichier que le\n        composant qui les utilise, via{\" \"}\n        <span className=\"code\">StyleSheet.create()</span>.\n      </blockquote>\n      <p>\n        Les composants spécifient la disposition de leurs enfants en utilisant\n        l’algorithme flexbox. Il permet de déclarer des vues qui s’étandent ou\n        qui s’étrécissent pour remplir des écrans de différentes dimensions. On\n        peut mélanger à sa guise ces éléments qui s’ajustent automatiquement\n        avec des éléments à taille fixe comme{\" \"}\n        <span className=\"code\">width: 100</span>.\n      </p>\n      <p>\n        Pour choisir le «&nbsp;layout&nbsp;» pour les composants enfants, nous\n        avons à faire 3 choix&nbsp;:\n      </p>\n      <table>\n        <thead>\n          <tr>\n            <th>Propriété</th> <th>Défaut</th> <th>Options</th>{\" \"}\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"code\">flexDirection</span>\n            </td>{\" \"}\n            <td>\n              <span className=\"code\">column</span>\n            </td>{\" \"}\n            <td>\n              <span className=\"code\">row</span>,{\" \"}\n              <span className=\"code\">column</span>\n            </td>{\" \"}\n            <td>\n              On veut une disposition vertical (column) or horizontale (\n              row)&nbsp;? Ce choix détermine l’axe principal du layout.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <span className=\"code\">justifyContent</span>\n            </td>{\" \"}\n            <td>\n              <span className=\"code\">flex-start</span>\n            </td>{\" \"}\n            <td>\n              <span className=\"code\">flex-start</span>,{\" \"}\n              <span className=\"code\">center</span>,{\" \"}\n              <span className=\"code\">flex-end</span>,\n              <span className=\"code\">space-around</span>,{\" \"}\n              <span className=\"code\">space-between</span>\n            </td>{\" \"}\n            <td>\n              Comment le contenu doit-il être distrbué le long de l’axe\n              principal&nbsp;? Au début, au centre, à la fin, en répartissant\n              l’espace&nbsp;?\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <span className=\"code\">alignItems</span>\n            </td>{\" \"}\n            <td>\n              <span className=\"code\">stretch</span>\n            </td>{\" \"}\n            <td>\n              <span className=\"code\">flex-start</span>,{\" \"}\n              <span className=\"code\">center</span>,{\" \"}\n              <span className=\"code\">flex-end</span>,{\" \"}\n              <span className=\"code\">stretch</span>\n            </td>{\" \"}\n            <td>\n              Comment le contenun doit être aligné le long de l’axe\n              secondaire&nbsp;? (Si l’axe principal est «&nbsp;row&nbsp;», le\n              secondaire est «&nbsp;column&nbsp;», et vice-versa) Le contenu\n              doit-il être aligne au début, au centre, à la fin ou étiré pour\n              remplir son parent&nbsp;?\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <p>\n        L’exemple suivant vous permet d’essayer les difféentes combinaisons.\n      </p>\n\n      <Playground\n        files={{\n          \"App.js\": `import React, { useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nimport Toggle from './Toggle'\n\nexport default function App() {\n  const [flexDirection, setFlexDirection] = useState('row')\n  const [justifyContent, setJustifyContent] = useState('center')\n  const [alignItems, setAlignItems] = useState('center')\n  const layoutStyle = { flexDirection, justifyContent, alignItems }\n\n  const primaryAxis = flexDirection === 'row' ? 'Horizontal' : 'Vertical'\n  const secondaryAxis = flexDirection === 'row' ? 'Vertical' : 'Horizontal'\n\n  return (\n    <View style={styles.container}>\n      <Toggle\n        label={'Axe principal (flexDirection)'}\n        value={flexDirection}\n        options={flexDirectionOptions}\n        onChange={(option) => {\n          setFlexDirection(option)\n        }}\n      />\n      <Toggle\n        label={\\`Distribution \\${primaryAxis.toLowerCase()}e (justifyContent)\\`}\n        value={justifyContent}\n        options={justifyContentOptions}\n        onChange={(option) => {\n          setJustifyContent(option)\n        }}\n      />\n      <Toggle\n        label={\\`Alignement \\${secondaryAxis.toLowerCase()} (alignItems)\\`}\n        value={alignItems}\n        options={alignItemsOptions}\n        onChange={(option) => {\n          setAlignItems(option)\n        }}\n      />\n      <View style={[styles.layout, layoutStyle]}>\n        <View style={styles.box} />\n        <View style={styles.box} />\n        <View style={styles.box} />\n      </View>\n    </View>\n  )\n}\n\nconst flexDirectionOptions = ['row', 'column']\nconst justifyContentOptions = [\n  'flex-start',\n  'center',\n  'flex-end',\n  'space-around',\n  'space-between',\n]\nconst alignItemsOptions = ['flex-start', 'center', 'flex-end', 'stretch']\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  layout: {\n    flex: 1,\n    backgroundColor: 'rgba(0,0,0,0.05)',\n  },\n  box: {\n    padding: 25,\n    backgroundColor: '#3B6CD4',\n    margin: 5,\n  },\n})\n`,\n          \"Toggle.js\": `import React from 'react'\nimport { View, Text, Button, StyleSheet } from 'react-native'\n\nexport default function Toggle({ label, options, value, onChange }) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.label}>{label}</Text>\n      <View style={styles.optionsContainer}>\n        {options.map((option) => (\n          <Button\n            color={option === value ? '#3B6CD4' : '#AAA'}\n            onPress={() => onChange(option)}\n            title={option}\n            key={option}\n          />\n        ))}\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    paddingBottom: 12,\n  },\n  label: {\n    fontSize: 14,\n    padding: 4,\n  },\n  optionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n})\n`,\n        }}\n      />\n\n      <BottomButtons\n        backTo=\"/specific-components\"\n        backLabel=\"Composants Spécifiques\"\n        nextTo=\"/specific-components/text\"\n        nextLabel=\"<Text />\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function TextPage() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>{\"<Text />\"}</h1>\n\t\t\t{/* <h2>Le composant {\"<View />\"}</h2> */}\n\t\t\t<p>\n\t\t\t\t<span className=\"code\">Text</span> est utilisé pour afficher du texte.\n\t\t\t\tContrairement à ce qu’on a l’habitude de voir dans le navigateur, tout\n\t\t\t\ttexte doit être «&nbsp;emballé&nbsp;» dans un composant{\" \"}\n\t\t\t\t<span className=\"code\">{\"<Text />\"}</span>.\n\t\t\t</p>\n\t\t\t<Playground\n\t\t\t\tcode={`import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Hello!</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    backgroundColor: 'whitesmoke',\n    color: '#4A90E2',\n    fontSize: 24,\n    padding: 10,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/view\"\n\t\t\t\tbackLabel=\"<View /> et StyleSheet\"\n\t\t\t\tnextTo=\"/specific-components/image\"\n\t\t\t\tnextLabel=\"<Image />\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ImagePage() {\n  return (\n    <div className=\"w-full\">\n      <h1>{\"<Image />\"}</h1>\n      {/* <h2>Le composant {\"<View />\"}</h2> */}\n      <p>\n        <span className=\"code\">Image</span> est utilisé pour afficher des\n        images. Les images peuvent être téléchargées dynamiquement ou importées\n        comme des fichiers, qui seront embarqués avec l’application.\n      </p>\n\n      <p>\n        Pour embarquer une image dans l’application, importez le fichier en\n        indiquant son chemin, avec l’extension. Qu’on soit sur Android ou iOS,\n        le même fichier sera utilsé. En écrivant{\" \"}\n        <span className=\"code\">import './test.png' </span>, le fichier le plus\n        approprié pour la taille de l’appareil sera choisi parmi&nbsp;:{\" \"}\n        <span className=\"code\">test.png</span>,{\" \"}\n        <span className=\"code\">test@2x.png</span>, ou{\" \"}\n        <span className=\"code\">test@3x.png</span>.\n      </p>\n\n      <p>\n        La mise en page pour les images téléchargées et les images embarquées.\n      </p>\n\n      <ul>\n        <li>\n          <strong>Images embarquées&nbsp;:</strong> le fichier est analysé à la\n          compilation et les dimensions sont incluses dans les métadonnées de\n          l’application. Les dimensions du composant{\" \"}\n          <span className=\"code\">Image</span> sont donc celle de l’image par\n          défaut&nbsp;;\n        </li>\n        <li>\n          <strong>Images téléchargées&nbsp;:</strong> les dimensions ne sont pas\n          connues à la compilation, donc elles sont à 0 par défaut. Pour que\n          l’image puisse s’afficher à l’écran, nous devons indiquer la hauteur\n          et la largeur (en dur, ou via flexbox).\n        </li>\n      </ul>\n\n      <Playground\n        code={`import React from 'react'\nimport { Image, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <Image\n      style={styles.image}\n      source={{ uri: 'https://picsum.photos/200' }}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 200,\n    height: 200,\n  },\n})\n      `}\n      />\n\n      <BottomButtons\n        backTo=\"/specific-components/text\"\n        backLabel=\"<Text />\"\n        nextTo=\"/specific-components/text-input\"\n        nextLabel=\"<TextInput />\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ImagePage() {\n  return (\n    <div className=\"w-full\">\n      <h1>{\"<TextInput />\"}</h1>\n      {/* <h2>Le composant {\"<View />\"}</h2> */}\n\n      <p>\n        Une exemple de saisie utilisateur. <br />\n        Le composant <span className=\"code\">{\"<TextInput />\"}</span> est très\n        riche et offre de nombreuses possibilités pour formater, valider la\n        saisie, choisir le type de clavier virtuel à afficher, etc.\n        <br />\n        La liste complète des props est disponible sur{\" \"}\n        <a\n          href=\"https://reactnative.dev/docs/textinput\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          la documentation offcielle de React Native\n        </a>\n      </p>\n\n      <p>\n        Son fonctionnement n’est pas très diffétent d’un{\" \"}\n        <span className=\"code\">{\"<input />\"}</span> du navigateur. On utilise un\n        état, <span className=\"code\">text</span>, pour conserver la valeur\n        courante du champ. On passe text au{\" \"}\n        <span className=\"code\">TextInput</span> dans la prop value, et à chaque\n        fois que <span className=\"code\">onChangeText()</span>\n        sera appelée, on mettra l’état à jour en appelant{\" \"}\n        <span className=\"code\">setText()</span>.\n      </p>\n\n      <blockquote>\n        Nous utilisons le hook <span className=\"code\">useState</span> pour\n        stocker la valeur. On le traite dans un autre chapitre.\n      </blockquote>\n\n      <Playground\n        code={`import React, { useState } from 'react'\nimport { View, Text, TextInput } from 'react-native'\n\nexport default function App() {\n  const [text, setText] = useState('')\n\n  return (\n    <View>\n      <TextInput\n        value={text}\n        style={{ fontSize: 42, color: 'steelblue' }}\n        placeholder=\"Votre texte ici…\"\n        onChangeText={(text) => {\n          setText(text)\n        }}\n      />\n      <Text style={{ fontSize: 24 }}>\n        Vous avez écrit : {text}\n      </Text>\n    </View>\n  )\n}\n      `}\n      />\n\n      <BottomButtons\n        backTo=\"/specific-components/image\"\n        backLabel=\"<Image />\"\n        nextTo=\"/specific-components/button\"\n        nextLabel=\"<Button />\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ButtonPage() {\n  return (\n    <div className=\"w-full\">\n      <h1>{\"<Button />\"}</h1>\n      {/* <h2>Le composant {\"<View />\"}</h2> */}\n\n      <p>\n        Le composant <span className=\"code\">{\"<Button />\"}</span> permet\n        d’afficher un bouton en utilisant les styles natifs de chaque\n        plateforme.\n      </p>\n\n      <p>\n        Se ce composant est pratique, il n’est pas très configurable. Si vous\n        voulez changer le style au-delà de la couleur de fond, vous utilierez\n        plutôt des composants <span className=\"code\">Touchable</span>.\n      </p>\n\n      <Playground\n        code={`import React, { useState } from 'react'\nimport { Button, StyleSheet, Text, View } from 'react-native'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title={'Pressez moi!'}\n        onPress={() => {\n          setCount(count + 1)\n        }}\n      />\n      <Text style={styles.text}>{\\`Pressé \\${count} fois\\`}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 18,\n    padding: 12,\n  },\n})\n      `}\n      />\n\n      <BottomButtons\n        backTo=\"/specific-components/text-input\"\n        backLabel=\"<TextInput />\"\n        nextTo=\"/specific-components/touchables\"\n        nextLabel=\"Touchables\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function TouchablesPage() {\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<h1>Touchables</h1>\n\t\t\t<h2>Touchable Opacity</h2>\n\n\t\t\t<p>\n\t\t\t\tQuand l’utilisateur touche ce composant, son opacité est réduite,\n\t\t\t\tjusqu’à ce qu’il soit relaché.\n\t\t\t\t<br />\n\t\t\t\tIl peut être stylisé, disposé via{\" \"}\n\t\t\t\t<span className=\"code\">StyleSheet</span>, comme une{\" \"}\n\t\t\t\t<span className=\"code\">View</span>.\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tL’opacité peut-être configurée via la prop{\" \"}\n\t\t\t\t<span className=\"code\">activeOpacity</span>\n\t\t\t</p>\n\n\t\t\t<blockquote>\n\t\t\t\tC’est le type de bouton le plus commun dans une application React\n\t\t\t\tNative.\n\t\t\t</blockquote>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React, { useState } from 'react'\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        style={styles.button}\n        activeOpacity={0.7}\n        onPress={() => {\n          setCount(count + 1)\n        }}\n      >\n        <Text style={styles.text}>Appuyez-moi dessus !</Text>\n      </TouchableOpacity>\n      <Text style={styles.text}>{\\`Appuyé \\${count} fois\\`}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    padding: 40,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: 'green',\n    backgroundColor: 'lightgreen',\n  },\n  text: {\n    fontSize: 18,\n    padding: 12,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<h2 className=\"mt-6\">Touchable Highlight</h2>\n\n\t\t\t<p>La couleur de ce composant change quand on appuie dessus.</p>\n\n\t\t\t<p>\n\t\t\t\tCette couleur peut être configurée avec la prop{\" \"}\n\t\t\t\t<span className=\"code\">underlayColor</span>\n\t\t\t</p>\n\n\t\t\t<Playground\n\t\t\t\tcode={`import React, { useState } from 'react'\nimport { StyleSheet, Text, TouchableHighlight, View } from 'react-native'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <View style={styles.container}>\n      <TouchableHighlight\n        style={styles.button}\n        underlayColor=\"#FAB\"\n        onPress={() => {\n          setCount(count + 1)\n        }}\n      >\n        <Text style={styles.text}>Appuyez-moi !</Text>\n      </TouchableHighlight>\n      <Text style={styles.text}>{\\`Appuyé \\${count} fois\\`}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    padding: 40,\n    borderRadius: 4,\n    backgroundColor: '#F88',\n  },\n  text: {\n    fontSize: 18,\n    padding: 12,\n  },\n})\n      `}\n\t\t\t/>\n\n\t\t\t<BottomButtons\n\t\t\t\tbackTo=\"/specific-components/button\"\n\t\t\t\tbackLabel=\"<Button />\"\n\t\t\t\tnextTo=\"/specific-components/lists\"\n\t\t\t\tnextLabel=\"Lists\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ListsPages() {\n  return (\n    <div className=\"w-full\">\n      <h1>Listes</h1>\n      <h2>Scroll View</h2>\n\n      <p>\n        <span className=\"code\">ScrollView</span> permet d’avoir une surface\n        scrollable, autant verticalement que horizontalement. <br />\n        Elle offre beaucoup de possibilités de customisation,{\" \"}\n        <a\n          href=\"https://reactnative.dev/docs/scrollview\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          (voir la documentation offcielle)\n        </a>{\" \"}\n        mais pour de meilleurs performances, on préfèrera{\" \"}\n        <span className=\"code\">FlatList</span> et{\" \"}\n        <span className=\"code\">SectionList</span>.\n      </p>\n\n      <h2>Flat List</h2>\n\n      <p>\n        <span className=\"code\">FlatList</span> est utilisée pour les grandes\n        quantités de contenu scrollable (c.f. Twitter ou Tumblr). Elle a les\n        mêmes props que\n        <span className=\"code\">ScrollView</span> dont elle hérite, mais avec des\n        performances accrues&nbsp;: seul le contenu visible à l’écran est rendu,\n        et seules les rangées nécessitant une mise à jour sont re-rendues.\n        <br />\n        Elle peut être scrollée horizontalement ou verticalement.\n      </p>\n\n      <p>\n        Elle ne rend pas ses enfants, mais utilse la prop{\" \"}\n        <span className=\"code\">renderItem</span>. Celle-ci est une fonction qui\n        prend comme paramètre un élément du tableau{\" \"}\n        <span className=\"code\">data</span>, et retourne un élement React.\n        <br />\n        Chaque élément du tableau <span className=\"code\">data</span> doit avoir\n        un identifiant unique pour que React puisse déterminer les\n        réarrangements. Par défaut, React utilise{\" \"}\n        <span className=\"code\">item.key</span>, mais ça peut être configuré avec\n        la prop <span className=\"code\">keyExtractor</span>.\n      </p>\n\n      <Playground\n        code={`import React from 'react'\nimport { FlatList, StyleSheet, Text } from 'react-native'\n\nconst items = [\n  { id: '0', text: 'View' },\n  { id: '1', text: 'Text' },\n  { id: '2', text: 'Image' },\n  { id: '3', text: 'ScrollView' },\n  { id: '4', text: 'ListView' },\n]\n\nexport default function App() {\n  return (\n    <FlatList\n      style={styles.container}\n      data={items}\n      renderItem={({ item }) => <Text style={styles.row}>{item.text}</Text>}\n      keyExtractor={(item) => item.id}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  row: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'skyblue',\n  },\n})\n      `}\n      />\n\n      <h2 className=\"mt-6\">Section List</h2>\n\n      <p>\n        <span className=\"code\">SectionList</span> est comme{\" \"}\n        <span className=\"code\">FlatList</span>, mais peut avoir des en-têtes de\n        section et des groupes de rangés distincts.\n      </p>\n\n      <p>\n        <span className=\"code\">SectionList</span> rend chaque élément du tableau\n        passé en prop <span className=\"code\">sections</span> en utilisant les\n        props <span className=\"code\">renderSectionHeader</span> et{\" \"}\n        <span className=\"code\">renderItem</span>. Chaque élément de{\" \"}\n        <span className=\"code\">sections</span> doit être un objet avec un\n        identifiant unique, un tableau <span className=\"code\">data</span>{\" \"}\n        contenant les données. Chaque élément de{\" \"}\n        <span className=\"code\">data</span> doit également avoir son identifiant\n        unique.\n        <br />\n        Si la prop <span className=\"code\">renderItem</span> fonctionne comme\n        pour <span className=\"code\">FlatList</span>,{\" \"}\n        <span className=\"code\">renderSectionHeader</span> prend un élément de{\" \"}\n        <span className=\"code\">sections</span> comme paramètre.\n      </p>\n\n      <h3>Exemple avec la même renderItem pour toutes les sections</h3>\n\n      <Playground\n        code={`import React from 'react'\nimport { SectionList, StyleSheet, Text } from 'react-native'\n\nconst sections = [\n  {\n    id: '0',\n    title: 'Basic Components',\n    data: [\n      { id: '0', text: 'View' },\n      { id: '1', text: 'Text' },\n      { id: '2', text: 'Image' },\n    ],\n  },\n  {\n    id: '1',\n    title: 'List Components',\n    data: [\n      { id: '3', text: 'ScrollView' },\n      { id: '4', text: 'ListView' },\n    ],\n  },\n]\n\nexport default function App() {\n  return (\n    <SectionList\n      style={styles.container}\n      sections={sections}\n      renderItem={({ item }) => <Text style={styles.row}>{item.text}</Text>}\n      renderSectionHeader={({ section }) => (\n        <Text style={styles.header}>{section.title}</Text>\n      )}\n      keyExtractor={(item) => item.id}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  row: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'skyblue',\n  },\n  header: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'steelblue',\n    color: 'white',\n    fontWeight: 'bold',\n  },\n})\n      `}\n      />\n\n      <h3>Exemple avec une renderItem par section</h3>\n\n      <p>\n        Une fonction <span className=\"code\">renderItem</span> peut être\n        spécifiée dans le tableau <span className=\"code\">sections</span>, une\n        par section, au lieu d’une prop de{\" \"}\n        <span className=\"code\">SectionList</span>. Chaque section peut être\n        rendue différemment. Une alternative serait d’utiliser les données des\n        éléments des <span className=\"code\">data</span> pour rendre chaque\n        élément différemment.\n      </p>\n\n      <Playground\n        code={`import React from 'react'\nimport { SectionList, StyleSheet, Text } from 'react-native'\n\nconst sections = [\n  {\n    id: '0',\n    title: 'Basic Components',\n    data: [\n      { id: '0', text: 'View' },\n      { id: '1', text: 'Text' },\n      { id: '2', text: 'Image' },\n    ],\n    renderItem: ({ item }) => {\n      return <Text style={styles.row}>{item.text}</Text>\n    },\n  },\n  {\n    id: '1',\n    title: 'List Components',\n    data: [\n      { id: '3', text: 'ScrollView' },\n      { id: '4', text: 'ListView' },\n    ],\n    renderItem: ({ item }) => <Text style={styles.rowDark}>{item.text}</Text>,\n  },\n]\n\nexport default function App() {\n  return (\n    <SectionList\n      style={styles.container}\n      sections={sections}\n      renderSectionHeader={({ section }) => {\n        return <Text style={styles.header}>{section.title}</Text>\n      }}\n      keyExtractor={(item) => item.id}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  row: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'skyblue',\n  },\n  rowDark: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'steelblue',\n  },\n  header: {\n    padding: 15,\n    marginBottom: 5,\n    backgroundColor: 'darkblue',\n    color: 'white',\n    fontWeight: 'bold',\n  },\n})\n      `}\n      />\n\n      <BottomButtons\n        backTo=\"/specific-components/touchables\"\n        backLabel=\"Touchables\"\n        nextTo=\"/react-hooks\"\n        nextLabel=\"React… avec les hooks !\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ReactHooks() {\n  return (\n    <div className=\"w-full\">\n      <h1>React… avec les hooks&nbsp;!</h1>\n\n      <p>\n        Cette section est plus un rappel, pour celles et ceux qui se seraient\n        déjà frotté·e·s aux fameux hooks de React, ou une succincte introduction\n        pour les autres.\n      </p>\n\n      <p>\n        Si les hooks n’ont déjà plus de secrets pour vous, vous pouvez passer au{\" \"}\n        <Link to=\"/application-development/\">développement d’application</Link>\n      </p>\n\n      <BottomButtons\n        backTo=\"/specific-components/lists\"\n        backLabel=\"Listes\"\n        nextTo=\"/react-hooks/usestate\"\n        nextLabel=\"useState()\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function UseState() {\n  return (\n    <div className=\"w-full\">\n      <h1>{\"useState()\"}</h1>\n      <p>\n        Le hook <span className=\"code\">useState</span> permet de se\n        «&nbsp;souvenir&nbsp;» d’une valeur dans un composant fonctionnel. Comme\n        un composant fonctionnel peut être appelé de nombreuses fois durant son\n        cycle de vie, toutes les variables déclrées normalement seront\n        réinitialisées. Avec <span className=\"code\">useState</span>, React se\n        souviendra de l’état de cette variable pour nous.\n      </p>\n      <h3>API</h3>\n      <p>\n        Ce hook ne prend qu’un argument, l’état initial, et retourne un tableau\n        avec deux éléments&nbsp;:\n      </p>\n      <ul>\n        <li>\n          <span className=\"code\">state</span> - l’état courant\n        </li>\n        <li>\n          <span className=\"code\">setState</span> - une fonction pour modifier\n          l’état\n        </li>\n      </ul>\n      <p>\n        Ex.{\" \"}\n        <span className=\"code\">\n          const [state, setState] = useState(initialValue)\n        </span>\n      </p>\n      <h3>Exemple</h3>\n      <p>\n        Dans cet exemple, on utilise <span className=\"code\">useState</span> pour\n        ajouter des valeurs à un tableau\n      </p>\n      <p>\n        On peut utiliser <span className=\"code\">useState</span> pour y stocker\n        tout type de valeur&nbsp;: un nombre, une chaîne, un tableau, un objet,\n        etc.\n      </p>\n      <Playground\n        code={`import React, { useState } from 'react'\nimport { View, Text, Button } from 'react-native'\n\nconst randomDiceRoll = () => Math.floor(Math.random() * 6) + 1\n\nexport default function App() {\n  const [diceRolls, setDiceRolls] = useState([])\n\n  return (\n    <View>\n      <Button\n        title=\"Lancez le dé !\"\n        onPress={() => {\n          setDiceRolls([...diceRolls, randomDiceRoll()])\n        }}\n      />\n      {diceRolls.map((diceRoll, index) => (\n        <Text style={{ fontSize: 24 }} key={index}>\n          {diceRoll}\n        </Text>\n      ))}\n    </View>\n  )\n}\n      `}\n      />\n\n      <h2>Mutabilité</h2>\n\n      <p>\n        Notez que quand on appelle <span className=\"code\">setDiceRolls()</span>,\n        on n’appelle pas\n        <span className=\"code\">diceRolls.push(randomDiceRoll())</span>. Au lieu\n        de cela, on passe un nouveau tableau contenant tous les elements de{\" \"}\n        <span className=\"code\">diceRoll</span> et la nouvelle valeur.\n        Pourquoi&nbsp;?\n      </p>\n\n      <p>\n        Les hooks peuvent déclencher un rendu de nos composant et une mise à\n        jour de l’UI.\n        <span className=\"code\">useState</span> déclenche un rendu quand{\" \"}\n        <span className=\"code\">setDiceRolls</span> est appelé avec une nouvelle\n        valeur. En interne, React utilise <span className=\"code\">===</span> pour\n        comparer l’ancienne valeur. Si on ne change que le contenu de l’objet ou\n        du tableau (ex. <span className=\"code\">Array.push()</span>),{\" \"}\n        <span className=\"code\">useState</span> ne pourra détecter le changement\n        et ne déclenchera pas de rendu.\n      </p>\n\n      <BottomButtons\n        backTo=\"/react-hooks\"\n        backLabel=\"React… avec les hooks !\"\n        nextTo=\"/react-hooks/useeffect\"\n        nextLabel=\"useEffect()\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function UseEffect() {\n  return (\n    <div className=\"w-full\">\n      <h1>{\"useEffect()\"}</h1>\n\n      <p>\n        On utilise <span className=\"code\">useEffect</span> pour appeler des\n        fonctions avec des «&nbsp;effets de bord&nbsp;», comme des requêtes\n        HTTP, écrire ou lire depuis <span className=\"code\">AsyncStorage</span>,\n        etc.\n      </p>\n\n      <h3>API</h3>\n\n      <p>Il prend 2 paramètres&nbsp;:</p>\n\n      <ul>\n        <li>\n          <span className=\"code\">callback</span> - une fonction avec effets de\n          bord\n        </li>\n        <li>\n          <span className=\"code\">dependences</span> - un tableau optionnel avec\n          les dépendances\n        </li>\n      </ul>\n\n      <p>\n        Au rendu, la callback sera appelée si une des valeurs passées dans les\n        dépendances change. En somme, <span className=\"code\">useEffect</span>{\" \"}\n        fonctionne comme un écouteur posé sur les dépendances.\n      </p>\n\n      <h3>Exemple</h3>\n\n      <p>\n        Dans cet exemple, on logue à chaque que count est un multiple de 3.{\" \"}\n      </p>\n\n      <Playground\n        code={`import React, { useState, useEffect } from 'react'\nimport { Button } from 'react-native'\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n  const countEvery3 = Math.floor(count / 3)\n\n  useEffect(() => {\n    console.log(countEvery3)\n  }, [countEvery3])\n\n  return (\n    <Button\n      title={\\`Plus ! \\${count}\\`}\n      onPress={() => {\n        setCount(count + 1)\n      }}\n    />\n  )\n}\n      `}\n      />\n\n      <h3>Dépendances vides ou undefined</h3>\n\n      <p>\n        Si les dépendances sont un tableau vide ou{\" \"}\n        <span className=\"code\">undefined</span>, le comportement de{\" \"}\n        <span className=\"code\">useEffect</span>\n        sera différent&nbsp;:\n      </p>\n\n      <ul>\n        <li>\n          <span className=\"code\">[]</span> - la callback est appelée au montage\n          du composant ;\n        </li>\n        <li>\n          <span className=\"code\">undefined</span> - la callback est appelée à\n          chaque rendu.\n        </li>\n      </ul>\n\n      <p>\n        Dans le cas du tableau vide, le comportement est semblable à{\" \"}\n        <span className=\"code\">componentDidMount</span>.\n      </p>\n\n      <h3>La retour de la callback</h3>\n\n      <p>\n        La callback passée à <span className=\"code\">useEffect</span> peut\n        retourner une fonction. Si une dépendance change, cette fonction sera\n        appelée avant la callback. <br />\n        Ça permet, par exemple, d’appeller un{\" \"}\n        <span className=\"code\">clearInterval</span>,{\" \"}\n        <span className=\"code\">unsubscribe</span> sur un Observable, ou\n        d’enlever des écouteurs.\n      </p>\n\n      <p>\n        Si les dépendances sont un tableau vide, le comportement est semblable à{\" \"}\n        <span className=\"code\">componentWillUnmount</span>.\n      </p>\n\n      <BottomButtons\n        backTo=\"/react-hooks/usestate\"\n        backLabel=\"useState()\"\n        nextTo=\"/react-hooks/useref\"\n        nextLabel=\"useRef()\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function UseRef() {\n  return (\n    <div className=\"w-full\">\n      <h1>{\"useRef()\"}</h1>\n\n      <p>\n        Avec <span className=\"code\">useRef</span>, on peut créer et mettre à\n        jour une variable mutable qui existe aussi longtemps que le composant.\n      </p>\n\n      <p>\n        Après avoir assigné la ref à une variable, on utilise{\" \"}\n        <span className=\"code\">.current</span> pour accéder à sa valeur.\n      </p>\n\n      <h3>Exemple</h3>\n\n      <p>\n        Dans cette exemple, on stocke la valeur de retour de{\" \"}\n        <span className=\"code\">setInterval</span>, ce qui nous permet d’appeler{\" \"}\n        <span className=\"code\">clearInterval</span> plus tard, au démontage du\n        composant par exemple.\n      </p>\n\n      <Playground\n        code={`import React, { useState, useEffect, useRef } from 'react'\nimport { View, Text, Button } from 'react-native'\n\nexport default function App() {\n  const intervalRef = useRef()\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    intervalRef.current = setInterval(\n      () => setCount((count) => count + 1),\n      1000\n    )\n\n    return () => {\n      clearInterval(intervalRef.current)\n    }\n  }, [])\n\n  return (\n    <View>\n      <Text style={{ fontSize: 120 }}>{count}</Text>\n      <Button\n        title=\"Stop\"\n        onPress={() => {\n          clearInterval(intervalRef.current)\n        }}\n      />\n    </View>\n  )\n}\n      `}\n      />\n\n      <BottomButtons\n        backTo=\"/react-hooks/useeffect\"\n        backLabel=\"useEffect()\"\n        nextTo=\"/react-hooks/others\"\n        nextLabel=\"Autres Hooks\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function UseEffect() {\n  return (\n    <div className=\"w-full\">\n      <h1>{\"Autres Hooks\"}</h1>\n      <h2>useMemo</h2>\n      <p>\n        <span className=\"code\">useMemo</span> s’utilise pour\n        «&nbsp;mémoïser&nbsp;» le résultat d’une opération, c’est-à-dire garder\n        en mémoire le résulat, et ne répéter l’opération que si les paramètres\n        d’entrée changent.\n      </p>\n      <h3>API</h3>\n      <p>Il prend 2 paramètres&nbsp;:</p>\n      <ul>\n        <li>\n          <span className=\"code\">callback</span> - une fonction qui retourne une\n          valeur\n        </li>\n        <li>\n          <span className=\"code\">dependences</span> - un tableau avec les\n          dépendances\n        </li>\n      </ul>\n      <p>Il retourne la valeur de retour de la callback.</p>\n      <p>\n        Ex.{\" \"}\n        <span className=\"code\">\n          {\"const value = useMemo(() => a + b, [a, b])\"}\n        </span>\n      </p>\n      <p>\n        Au rendu, la callback sera appelée si une des valeurs passées dans les\n        dépendances change. En somme, <span className=\"code\">useMemo</span>{\" \"}\n        fonctionne comme un écouteur posé sur les dépendances.\n      </p>\n      <h2>useCallback</h2>\n      <p>\n        <span className=\"code\">useCallback</span> s’utilise pour\n        «&nbsp;mémoïser&nbsp;» une fonction qui serait ensuite passée en props à\n        des composants enfants.\n      </p>\n      <p>\n        En effet, comme les composants fonctionnels sont appelés fréquemment,\n        une fonction déclarée dans un composant, telle qu’un onClick serait\n        redéfinie à chaque rendu, créant une nouvelle référence. Comme React\n        utilise <span className=\"code\">===</span> pour comparer les props et\n        déterminer si un composant doit être rendu, les composants enfants\n        utilisant la fonction onClick seraient systématiquement rendus.\n      </p>\n      <h3>API</h3>\n      <p>Il prend 2 paramètres&nbsp;:</p>\n      <ul>\n        <li>\n          <span className=\"code\">callback</span> - une fonction\n        </li>\n        <li>\n          <span className=\"code\">dependences</span> - un tableau avec les\n          dépendances\n        </li>\n      </ul>\n      <p>Il retourne la callback.</p>\n      <p>\n        Ex.{\" \"}\n        <span className=\"code\">\n          {\n            \"const onClick = useCallback(event => console.log(event.target.value), [])\"\n          }\n        </span>\n      </p>\n      <h2>useReducer</h2>\n      <p>\n        Le hook <span className=\"code\">useReducer</span> est semblable au hook{\" \"}\n        <span className=\"code\">useState</span>, mais avec une approche plus\n        structurée pour gérer des valeurs plus complexes.\n      </p>\n      <p>\n        On l’utilise habituellement pour un état qui contient sous-valeurs.{\" \"}\n        <br />\n        Par exemple l’état d’une requête HTTP, dont les sous-valeurs seraient\n        <span className=\"code\">loading</span>,{\" \"}\n        <span className=\"code\">error</span>,{\" \"}\n        <span className=\"code\">result</span>.\n      </p>\n      <blockquote>\n        Il s’inspire de{\" \"}\n        <a href=\"https://redux.js.org\" target=\"_blank\" rel=\"noreferrer\">\n          Redux\n        </a>\n        , et en a les inconvénients&nbsp;: beaucoup de boilerplate.{\" \"}\n      </blockquote>\n      <h3>API</h3>\n      <p>Il requiert 2 paramètre&nbsp;:</p>\n\n      <ul>\n        <li>\n          <span className=\"code\">reducer</span> – une fonction sans effets de\n          bord qui prend l’état courant et une action, et retourne un nouvel\n          état basé sur l’action\n        </li>\n        <li>\n          <span className=\"code\">initialState</span> – la valeur initiale de\n          l’état\n        </li>\n      </ul>\n\n      <p>\n        Il retourne l’état courant et une fonction{\" \"}\n        <span className=\"code\">dispatch</span> pour modifier l’état.\n      </p>\n      <h3>Exemple</h3>\n      <p>\n        Dans cet exemple, <span className=\"code\">useReducer</span> nous permet\n        de stocker le prénom et le nom dans un seul objet.\n      </p>\n      <blockquote>\n        Par convention, les actions sont des objets avec une propriété\n        <span className=\"code\">type</span> et une propriété{\" \"}\n        <span className=\"code\">payload</span>. Toujours par convention, la\n        valeur de <span className=\"code\">type</span> est une chaine en snake\n        case majuscule&nbsp;:\n        <span className=\"code\">\"SET_FIRSTNAME\"</span>\n      </blockquote>\n      <Playground\n        code={`import React, { useReducer } from 'react'\nimport { View, Text, TextInput } from 'react-native'\n\nconst ACTIONS = {\n  SET_FIRSTNAME: \"SET_FIRSTNAME\",\n  SET_LASTNAME: \"SET_LASTNAME\",\n}\n\nconst INITIAL_STATE = {\n  first: '',\n  last: '',\n}\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.SET_FIRSTNAME:\n      return { ...state, first: payload }\n    case ACTIONS.SET_LASTNAME:\n      return { ...state, last: payload }\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE)\n\n  return (\n    <View>\n      <TextInput\n        style={{ fontSize: 32 }}\n        placeholder=\"Prénom\"\n        value={state.first}\n        onChangeText={(text) => {\n          dispatch({ type: ACTIONS.SET_FIRSTNAME, payload: text })\n        }}\n      />\n      <TextInput\n        style={{ fontSize: 32 }}\n        placeholder=\"Nom\"\n        value={state.last}\n        onChangeText={(text) => {\n          dispatch({ type: 'last', payload: text })\n        }}\n      />\n      <Text style={{ fontSize: 32 }}>\n        Salut {state.first} {state.last} !\n      </Text>\n    </View>\n  )\n}\n      `}\n      />\n      <BottomButtons\n        backTo=\"/react-hooks/useref\"\n        backLabel=\"useRef()\"\n        nextTo=\"/react-hooks/custom\"\n        nextLabel=\"Hooks Custom\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Playground from \"../../components/Playground\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function UseEffect() {\n  return (\n    <div className=\"w-full\">\n      <h1>Hooks Custom</h1>\n\n      <p>\n        On peut composer de nouveaux hooks à partir de ceux de base. Par\n        convention tous les hooks utilisent le préfixe{\" \"}\n        <span className=\"code\">use</span>. Ex.{\" \"}\n        <span className=\"code\">useUser</span>,{\" \"}\n        <span className=\"code\">useStore</span>, etc.\n      </p>\n\n      <h2>Exemple</h2>\n\n      <p>\n        Ici on crée un hook <span className=\"code\">useInterval</span> pour\n        exécuter une fonction à interval régulier. C’est plus compliqué qu’il\n        n’y paraît, et je vous recommande chaudement de vous garder ça sous le\n        coude.\n        <br />\n        Le plus, c’est qu’on peut changer le delay et la callback n’importe\n        quand.\n      </p>\n\n      <blockquote>\n        Exemple dégoté sur&nbsp;:\n        <br />\n        <a\n          href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n        </a>\n      </blockquote>\n\n      <Playground\n        code={`import React, { useState, useEffect, useRef } from 'react'\nimport { Text } from 'react-native'\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay !== null) {\n      let id = setInterval(() => {\n        savedCallback.current()\n      }, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport default function App() {\n  const [count, setCount] = useState(0)\n\n  useInterval(() => {\n    setCount(count + 1)\n  }, 1000)\n\n  return <Text style={{ fontSize: 120 }}>{count}</Text>\n}`}\n      />\n\n      <BottomButtons\n        backTo=\"/react-hooks/other\"\n        backLabel=\"Autres hooks\"\n        nextTo=\"/application-development\"\n        nextLabel=\"Développement d’applicatons\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ApplicationDeveloppement() {\n  return (\n    <div className=\"w-full\">\n      <h1>Développement d’Application</h1>\n\n      <p>\n        Maintenant que nous avons vu les composants de base de React Native et\n        le fonctionnement des Hooks de React, nous sommes capables de créer des\n        vues pour notre application. Cependant, il reste encore pas mal de\n        choses à voir pour développer une App complète&nbsp;:\n      </p>\n\n      <ul>\n        <li>\n          <Link to=\"/application-development/project-structure\">\n            Structures de Projets\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/application-development/navigation\">Navigation</Link>\n        </li>\n        <li>\n          <Link to=\"/application-development/state-management\">\n            État global et persistance\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/application-development/animations\">Animations</Link>\n        </li>\n        <li>\n          <Link to=\"/application-development/capteurs\">Capteurs</Link>\n        </li>\n      </ul>\n\n      <BottomButtons\n        backTo=\"/react-hooks/custom\"\n        backLabel=\"Hooks Custom\"\n        nextTo=\"/application-development/project-structure\"\n        nextLabel=\"Structures de Projets\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nexport default function ProjectStructure() {\n  return (\n    <div className=\"w-full\">\n      <h1>Structures de Projets</h1>\n\n      <h2>Organisation des projets</h2>\n\n      <p>\n        Il y a plein de bonnes façons d’organiser un projet. Voici quelques unes\n        d’entre-elles pour des projets de différentes tailles. Si vous êtes déjà\n        familier·ère avec le développement web et React, l’organisation des\n        projets et sensiblement la même.\n      </p>\n\n      <h3>Petits projets</h3>\n\n      <p>\n        Pour une petite application, tous les composants peuvent aller dans le\n        même dossier&nbsp;:\n      </p>\n\n      <pre>\n        {`MyApp\n├── components\n│   ├── Avatar.js\n│   ├── Button.js\n│   └── List.js\n└── App.js`}\n      </pre>\n\n      <p>\n        Généralement, on a un composant par fichier, et ce composant devrait\n        être le «&nbsp;default export&nbsp;». Le fichier a le même nom que le\n        componant, et les noms de composants commencent par une majuscule. Le\n        nom du fichier commence donc par une majuscule aussi.\n      </p>\n\n      <h3>Projets moyens</h3>\n\n      <p>\n        Si l’application grandit, on séparera les composants\n        «&nbsp;écrans&nbsp;» dans un dossier{\" \"}\n        <span className=\"code\">screen</span> et créera des sous-dossiers dans{\" \"}\n        <span className=\"code\">components</span>. Un composant\n        «&nbsp;écran&nbsp;» est un composant qui occupe tout l’écran, un peu\n        comme une page en web.\n      </p>\n\n      <p>\n        On aura également tendance à séparer les{\" \"}\n        <span className=\"code\">navigators</span>, responsables de la navigation\n        dans l’application.\n      </p>\n\n      <pre>\n        {`MyApp\n├── components\n│   ├── buttons\n│   │   ├── RoundButton.js\n│   │   └── SquareButton.js\n│   ├── cards\n│   │   ├── ArticleCard.js\n│   │   ├── ImageCard.js\n│   │   └── VideoCard.js\n│   ├── Avatar.js\n│   └── List.js\n├── screens\n│   ├── Feed.js\n│   ├── Search.js\n│   ├── Post.js\n│   ├── Reply.js\n│   ├── Profile.js\n│   └── Settings.js\n├── navigators\n│   ├── RootStackNavigator.js\n│   └── ProfileTabNavigator.js\n└── App.js`}\n      </pre>\n\n      <p>Autres catégories communes&nbsp;:</p>\n\n      <ul>\n        <li>\n          <span className=\"code\">api</span>: appels HTTP à une API{\" \"}\n        </li>\n        <li>\n          <span className=\"code\">assets</span>: images et autres fichiers{\" \"}\n        </li>\n        <li>\n          <span className=\"code\">hooks</span>: hooks custom\n        </li>\n        <li>\n          <span className=\"code\">state</span>: reducers ou autres fonctions pour\n          gérer l’état global de l’application{\" \"}\n        </li>\n        <li>\n          <span className=\"code\">styles</span>: couleurs et élements de style\n          partagés (parfois appelé theme)\n        </li>\n        <li>\n          <span className=\"code\">utils</span>: autres fonctions comme le\n          formattage de chaîne ou de date{\" \"}\n        </li>\n      </ul>\n\n      <pre>\n        {`MyApp\n├── api\n│   ├── twitter.js\n│   ├── facebook.js\n│   └── instagram.js\n├── assets\n│   ├── app-icon.png\n│   └── splash-screen.png\n├── hooks\n│   ├── useInterval.js\n│   └── useLogin.js\n├── state\n│   ├── posts.js\n│   ├── users.js\n│   └── tweets.js\n├── styles\n│   ├── colors.js\n│   ├── textStyles.js\n│   └── spacing.js\n├── utils\n│   ├── generateUuid.js\n│   └── formatCurrency.js\n└── ...`}\n      </pre>\n\n      <h3>Grands Projets</h3>\n\n      <p>\n        Quand un projet grandit est inclut un grand nombre de fonctionnalités,\n        il est commun de catégoriser les fichiers par domaine, ou\n        fonctionnalités, à la racine du projet. (c.f.{\" \"}\n        <a\n          href=\"https://fr.wikipedia.org/wiki/Conception_pilot%C3%A9e_par_le_domaine\"\n          taget=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Domain Driven Development\n        </a>\n        )\n      </p>\n\n      <p>\n        Les dossiers de fonctionnalités sont souvent groupés dans un dossier\n        modules, ou packages, ou apps. Les composants et utilitaires partagés\n        entre fonctionnalités vivront dans un dossier spécial et traité comme\n        une API publique.\n        <br />\n        Chaque fonctionnalité ne doit faire référence qu’à des fichiers de son\n        dossier ou du dossier partagé.\n      </p>\n\n      <pre>\n        {`MyApp\n├── modules\n│   ├── accounts\n│   │   ├── components\n│   │   │   ├── UserProfile.js\n│   │   │   └── LoginInput.js\n│   │   ├── screens\n│   │   │   ├── Profile.js\n│   │   │   ├── Login.js\n│   │   │   └── Deactivate.js\n│   │   ├── utils\n│   │   │   └── formatAccountName.js\n│   │   └── App.js\n│   ├── growth\n│   │   ├── components\n│   │   ├── screens\n│   │   ├── utils\n│   │   └── App.js\n│   ├── privacy\n│   │   ├── components\n│   │   ├── screens\n│   │   ├── utils\n│   │   └── App.js\n│   └── shared\n│       ├── components\n│       │   ├── Avatar.js\n│       │   ├── Button.js\n│       │   └── List.js\n│       └── utils\n│           └── format.js\n└── App.js`}\n      </pre>\n\n      <h2>Séparation des responsabilités</h2>\n\n      <p>\n        Dans React (Native), le composant n’est qu’une brique de notre UI.\n        Certains frameworks ont des concepts de «&nbsp;vue&nbsp;» et de\n        «&nbsp;controllers&nbsp;», mais rien de tout ça n’existe dans React.\n        C’est au développeur de faire le travail.\n      </p>\n\n      <p>\n        Une façon de faire commune est de séparer les composants de présentation\n        des conteneurs (containers).\n      </p>\n\n      <h3>Containers</h3>\n\n      <p>\n        Les containers contiennent la logique métier. C’est un peu comme des\n        controllers (mais pas vraiment non plus).\n      </p>\n\n      <p>\n        Les containers ont connaissance des données et de la logique de votre\n        application. Il récupèrent les données et les passent, avec les\n        callbacks, aux components présentationnels. Ils s’occupent de mettre à\n        jour les données quand l’utilisateur interagit avec l’application. Ils\n        ne devraient pas rendre de composants commet Text ou Image – ça, c’est\n        pour les composants présentationnels.\n      </p>\n\n      <h3>Composants présentationnels</h3>\n\n      <p>\n        Ceux-là rendent la partie visible de l’UI, et ne devraient pas contenir\n        de logique applicative. Dans l’idéal ils n’utilisent que leurs props, si\n        bien qu’ils pourraient être utilisés dans d’autres applications sans\n        modifications.\n        <br />\n        On les appelle souvent «&nbsp;composants&nbsp;», par opposition aux\n        «&nbsp;containers&nbsp;».\n      </p>\n\n      <p>\n        Bien séparer la logique de la présentation permet de partager du code\n        facilement entre applications de projets différents et donc de gagner du\n        temps.\n      </p>\n\n      <h3>Exemple</h3>\n\n      <pre>\n        {`MyApp\n├── components\n│   ├── buttons\n│   │   ├── RoundButton.js\n│   │   └── SquareButton.js\n│   ├── cards\n│   │   ├── ArticleCard.js\n│   │   ├── ImageCard.js\n│   │   └── VideoCard.js\n│   ├── Avatar.js\n│   └── List.js\n├── containers\n│   ├── CardList.js\n│   ├── UserProfile.js\n│   └── RelatedTweets.js\n├── screens\n│   ├── Feed.js\n│   ├── Search.js\n│   ├── Post.js\n│   ├── Reply.js\n│   ├── Profile.js\n│   └── Settings.js\n└── ...`}\n      </pre>\n\n      <BottomButtons\n        backTo=\"/application-development\"\n        backLabel=\"Développement d’Application\"\n        nextTo=\"/application-development/android-and-ios\"\n        nextLabel=\"Android et iOS\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nimport Playground from \"../../components/Playground\";\n\nexport default function Geoloc() {\n  return (\n    <div className=\"w-full\">\n      <h1>Android et iOS (et web, et …)</h1>\n      <p>\n        Les platformes mobiles implémentent de nombreuses choses de manières\n        différtentes&nbsp;: la navigation, l’accès aux stockage, certains\n        éléments d’interface…\n      </p>\n\n      <p>\n        Il est important de prendre en compte la plateforme cible, parce que les\n        habitudes des utilisateurs y sont parfois très différentes. Vous\n        tomberez probablement dans des cas où vous devrez coder des\n        comportements différents pour chaque plateforme (Deep Links, date\n        pickers …). Les tailles d’écran (tablettes, par exemple) pouvant varier,\n        les tailles de vos images doivent aussi s’adapter.\n      </p>\n\n      <p>Heureusement, React Native a des outils pour ça</p>\n\n      <h2>Les tailles d’images</h2>\n\n      <p>\n        Dans le développement d’applications mobile natif, il convient d’avoir\n        deux ou trois exemplaires d’une image à différentes tailles&nbsp;:\n        taille réelle (1x), deux fois la taille (2x), trois fois la taille (3x)…\n      </p>\n\n      <p>\n        Sur Android, il y a un dossier pour chaque taille (hdi, xhdi, xxhdi, …).\n        <br />\n        Sur iOS, il faut utiliser l’IDE d’Apple et leur « Asset Manager ».\n        <br />\n        React Native, cette fois, nous sauve.\n      </p>\n\n      <p>\n        On a vu qu’il est possible d’embarquer des images dans une application\n        via un simple{\" \"}\n        <span className=\"code\">import image from './assets/image.png';</span>.\n      </p>\n\n      <p>\n        Si vous avez trois exemplaires de l’image pour trois tailles d’écran, le\n        simple{\" \"}\n        <span className=\"code\">import image from './assets/image.jpg'</span>{\" \"}\n        suffit. React Native choisie le bon fichier parmi{\" \"}\n        <span className=\"code\">image.jpg</span> (1x),{\" \"}\n        <span className=\"code\">image@x2.jpg</span> (2x) et{\" \"}\n        <span className=\"code\">image@x3.jpg</span> (3x). :wa\n      </p>\n\n      <h2>Différentes implémentations pour diférentes platformes</h2>\n\n      <p>\n        Il peut arriver que vous ayez besoin de d’implémenter des comportements\n        différents en foncion de la platforme cible. Pour cela, React Native se\n        base sur l’extension du fichier.\n      </p>\n\n      <p>Par exemple&nbsp;:</p>\n\n      <ul>\n        <li>\n          <span className=\"code\">MonComposant.ios.js</span>&nbsp;: sera utilisé\n          pour iOS\n        </li>\n        <li>\n          <span className=\"code\">MonComposant.android.js</span>&nbsp;: sera\n          utilisé pour Android\n        </li>\n        <li>\n          <span className=\"code\">MonComposant.web.js</span>&nbsp;: sera utilisé\n          pour Web\n        </li>\n      </ul>\n\n      <BottomButtons\n        backTo=\"/application-development/project-structure\"\n        backLabel=\"Structures de Projets\"\n        nextTo=\"/application-development/navigation\"\n        nextLabel=\"Navigation\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BottomButtons from \"../../components/BottomButtons\";\nimport Playground from \"../../components/Playground\";\n\nexport default function Navigation() {\n  return (\n    <div className=\"w-full\">\n      <h1>Navigation</h1>\n      <p>\n        La navigation entre les différentes plateformes est une chose\n        compliquée. iOS et Android ont deux approches complètement difféentes\n        sur le sujet, et aucune des deux n’est semblable à la navigation dans le\n        navigateur. Pour cette raison, React Native ne fourni aucun outil pour\n        la gérer.\n      </p>\n      <p>\n        Nous allons donc devoir recourir à une librairie tierce&nbsp;:\n        <a href=\"https://reactnavigation.org/\" target=\"_blank\" rel=\"noreferrer\">\n          react-navigation\n        </a>\n        .\n      </p>\n\n      <p>La documentation de react-navigation explique comment l’installer.</p>\n\n      <blockquote>\n        Il est essentiel d’installer au minimum les modules suivants:\n        @react-navigation/native, @react-navigation/stack. Si vous souhaitez\n        utiliser les menus latéraux, installez aussi @react-navigation/drawer.\n        Et @react-navigation/bottom-tabs pour les tabs.\n      </blockquote>\n\n      <h2>NavigationContainer</h2>\n\n      <p>C’est lui qui contient et gère le contexte de navigation.</p>\n\n      <p>\n        Toutes les pages (screens) doivent être des composants enfants d’un\n        NavigationContainer. Ce composant parent de toute l’application doit\n        être un des premiers (sinon le premier) à apparaître dans la hiérarchie\n        des composants.\n      </p>\n\n      <p>Par conséquent, dans votre App.js, on devrait trouver&nbsp;:</p>\n\n      <Playground\n        noPlayer\n        height={300}\n        code={`import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      {/* ...Navigators ... */}\n    </NavigationContainer>\n  )\n}`}\n      />\n\n      <blockquote>\n        Les hooks useNavigation et useRoute ne peuvent être utilisés que dans\n        des composants enfants de NavigationContainer.\n      </blockquote>\n\n      <h2>Les Navigators</h2>\n\n      <p>\n        Les navigators regroupent les pages entre lesquelles il est possible de\n        naviguer.{\" \"}\n      </p>\n\n      <p>Il en existe de trois sortes&nbsp;:</p>\n      <ul>\n        <li>\n          <span className=\"code\">createStackNavigator</span> depuis\n          @react-navigation/stack\n        </li>\n        <li>\n          <span className=\"code\">createBottomTabNavigator</span> depuis\n          @react-navigation/bottom-tabs\n        </li>\n        <li>\n          <span className=\"code\">createDrawerNavigator</span> depuis\n          @react-navigation/drawer\n        </li>\n      </ul>\n\n      <p>\n        Par habitude, ils vivent dans un dossier spécifique du projet&nbsp;:\n        navigators\n      </p>\n\n      <p>\n        On va d’abord créer un stack navigator, qui est le plus simple. Ainsi,\n        dans un fichier /navigators/MainNavigator.js, on aurait&nbsp;:\n      </p>\n\n      <Playground\n        noPlayer\n        height={300}\n        files={{\n          \"navigators/MainNavigtor.js\": `\nimport { createStackNavigator } from '@react-navigation/stack'\nimport Screen1 from '../screens/Screen1'\nimport Screen2 from '../screens/Screen2'\nimport Screen3 from '../screens/Screen3'\n\nconst Root = createStackNavigator()\n\nexport default function MainNavigator() {\n  return (\n    <Root.Navigator>\n      <Root.Screen name=\"Screen1\" component={Screen1} />\n      <Root.Screen name=\"Screen2\" component={Screen2} />\n      <Root.Screen name=\"Screen3\" component={Screen3} />\n    </Root.Navigator>\n  )\n}\n      `,\n          \"App.js\": `import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\n\nimport MainNavigator from './navigators/MainNavigator'\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MainNavigator />\n    </NavigationContainer>\n  )\n}\n          `,\n        }}\n      />\n\n      <h2>Naviguer</h2>\n      <blockquote>\n        Comme indiqué precédemment, les hooks useNavigation et useRoute ne\n        peuvent être utilisés que dans des screens ou des composants enfants de\n        screens.\n      </blockquote>\n\n      <p>Chaque navigateur a sa propre fonction pour naviguer</p>\n      <ul>\n        <li>\n          Stack: <span className=\"code\">push</span>\n        </li>\n        <li>\n          Tabs: <span className=\"code\">navigate</span>\n        </li>\n        <li>\n          Drawer: <span className=\"code\">openDrawer</span>\n        </li>\n      </ul>\n\n      <p>\n        Pour naviguer, on donne le nom de l’écran et, optionnellement, des\n        paramètres, ex.{\" \"}\n        <span className=\"code\">\n          navigator.push(\"Screen2\", {`{ paramA: \"Hello!\" }`})\n        </span>\n        .\n      </p>\n\n      <p>Voyons ce à quoi ça pourrait ressembler</p>\n\n      <Playground\n        noPlayer\n        height={400}\n        files={{\n          \"Screen1.js\": `import { useNavigation } from '@react-navigation/native'\n\nconst Screen1 = () => {\n  const navigation = useNavigation()\n\n  return (\n    <Button\n      onPress={() => {\n        navigation.push('Screen2', { paramA: 'Hello!' })\n      }}\n    />\n  )\n}\n          `,\n          \"Screen2.js\": `import { useRoute } from '@react-navigation/native'\n\nconst Screen2 = () => {\n  const route = useRoute()\n\n  return <Text>{route.params.paramA}</Text>\n}\n          `,\n        }}\n      />\n\n      <BottomButtons\n        backTo=\"/application-development/android-and-ios\"\n        backLabel=\"Android et iOS\"\n        nextTo=\"/application-development/state\"\n        nextLabel=\"État global et persistance\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BottomButtons from \"../../components/BottomButtons\";\nimport Playground from \"../../components/Playground\";\n\nexport default function State() {\n  return (\n    <div className=\"w-full\">\n      <h1>État Global</h1>\n      <p>\n        Comme React ne se préocuppe que de la vue, il ne fourni de bonne\n        solution pour gérer l’état global des données de l’application. Or, à\n        mesure qu’une application grandit, il peut devenir difficile de gérer\n        l’ensemble des données qui vivent&nbsp;: infos utilisateur, contenu\n        téléchargé depuis une API, images, etc.\n      </p>\n      <p>\n        Il y a, comme souvent, plusieurs façons de faire, en fonction de la\n        taille de votre application.\n      </p>\n\n      <h2>Options communes</h2>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Options</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th>useReducer</th>\n            <td>\n              C’est un hook fourni par React. Ça peut suffire pour commencer,\n              mais c’est pénible à utiliser.\n            </td>\n          </tr>\n          <tr>\n            <th>Zustand</th>\n            <td>\n              Une solution simple et efficace, que l’on détaille plus loin.\n              Utilise des hooks, ou des observables pour notifier des\n              changements et mettre à jour l’UI. Supporte les actions\n              asynchrones, la persistance…\n            </td>\n          </tr>\n          <tr>\n            <th>Redux</th>\n            <td>\n              Solution très populaire. Nécessite beaucoup de boileplate et\n              d’utilitaires tiers pour fonctionner. Souvent overkill.\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h2>Zustand</h2>\n\n      <blockquote>\n        Documentation :{\" \"}\n        <a\n          href=\"https://github.com/pmndrs/zustand\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          https://github.com/pmndrs/zustand\n        </a>\n      </blockquote>\n\n      <p>\n        Comme Redux, Zustand permet de créer des stores pour y stocker des états\n        complexes. Il peut y avoir plusieurs stores dans la même application.\n      </p>\n\n      <p>\n        Contrairement à Redux, définir un store, son état initial, et les\n        actions pour le modifier est très simple&nbsp;:\n      </p>\n\n      <Playground\n        noPlayer\n        height={300}\n        code={`import create from 'zustand'\n\nconst useStore = create(set => ({\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n\nexport default useStore`}\n      />\n\n      <p>\n        Et pour utiliser le store dans les composants, c’est tout aussi\n        simple&nbsp;:{\" \"}\n      </p>\n\n      <Playground\n        noPlayer\n        height={300}\n        code={`import useStore from '../state'\nfunction BearCounter() {\n  const bears = useStore(state => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}`}\n      />\n\n      <h2>Persistance</h2>\n\n      <p>\n        La persitance données est essentielle parce qu’on ne veut pas que\n        l’utilisateur perde toutes ses données à chaque fois qu’il quitte\n        l’appli.\n        <br />\n        Pour ça, nous avons <span className=\"code\">AsyncStorage</span> (qui\n        n’est plus une API fournie par React Native, mais une librairie\n        tierce)&nbsp;:{\" \"}\n        <a\n          href=\"https://react-native-async-storage.github.io/async-storage/docs/install\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Async Storage\n        </a>\n        ).\n      </p>\n      <p>\n        <span className=\"code\">AsyncStorage</span> reprend les methodes{\" \"}\n        <span className=\"code\">setItem</span>\n        et <span className=\"code\">getItem</span> des{\" \"}\n        <span className=\"code\">localStorage</span> et\n        <span className=\"code\">sessionStorage</span> de la WebAPI, à la\n        différence près qu’elles sont asynchrones (elles retournent des\n        Promise).\n      </p>\n\n      <h3>Avec Zustand</h3>\n\n      <Playground\n        noPlayer\n        height={400}\n        code={`import create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => AsyncStorage,\n  }\n))`}\n      />\n\n      <BottomButtons\n        backTo=\"/application-development/navigation\"\n        backLabel=\"Navigation\"\n        nextTo=\"/application-development/animations\"\n        nextLabel=\"Animations\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BottomButtons from \"../../components/BottomButtons\";\nimport Playground from \"../../components/Playground\";\n\nexport default function Animations() {\n  return (\n    <div className=\"w-full\">\n      <h1>Animations</h1>\n      <p>\n        L’API <span className=\"code\">Animated</span> nous permet d’animer le\n        style des composants.\n      </p>\n      <p>Il y a 4 quatre parties fondamentale à cette API&nbsp;:</p>\n      <ul>\n        <li>\n          <span className=\"code\">Animated.Value</span> - emballe une valeur\n          numérique pour être utisée dans les styles (ou interpolate, voir plus\n          bas){\" \"}\n        </li>\n        <li>\n          <span className=\"code\">Animated.View</span>,{\" \"}\n          <span className=\"code\">Animated.Text</span>, ... - composants spéciaux\n          qui peuvent être animés (les autres ne le peuvent pas, vous aurez des\n          erreurs bizarres){\" \"}\n        </li>\n        <li>\n          <span className=\"code\">Animated.timing</span>,{\" \"}\n          <span className=\"code\">Animated.spring</span>, ... - types d’animation{\" \"}\n        </li>\n        <li>\n          <span className=\"code\">.start()</span> - BAM ! Démarre l’animation\n        </li>\n      </ul>\n      <p>Voyons ça étape par étape</p>\n      <h2>1. Créer une Animated.Value</h2>\n      <p>\n        Pour emballer la valeur, appelez{\" \"}\n        <span className=\"code\">new Animated.Value(value)</span>.\n      </p>\n      <Playground\n        noPlayer\n        height={300}\n        code={`import React, { useRef } from 'react'\nimport { Animated } from 'react-native'\n\nexport default function MyComponent() {\n  const value = useRef(new Animated.Value(0))\n\n  // ...\n}`}\n      />\n      <h2>2. Choissez un composant à animer</h2>\n      <p>\n        <span className=\"code\">Animated</span> exporte des versions spéciales de{\" \"}\n        <span className=\"code\">View</span>, <span className=\"code\">Text</span>,\n        et de <span className=\"code\">Image</span>. Ces composants peuvent avoir\n        des Animated.Value dans leur prop style. Pour animer autre chose, vous\n        pouvez aussi emballer n’importe quel composant&nbsp;:\n        <span clasName=\"code\">\n          const AnimatedButton = Animated.createAnimatedComponent(Button)\n        </span>\n        .\n      </p>\n      <p>Et puis, on peut utiliser cette Animated.Value dans le style</p>\n      <blockquote>\n        Ça ne marchera pas, parcequ’on n’a pas indiqué de style à animer !\n      </blockquote>\n      <Playground\n        code={`import React, { useRef } from 'react'\nimport { Animated, Button } from 'react-native'\n\nexport default function MyComponent() {\n  const value = useRef(new Animated.Value(0))\n\n  return (\n    <>\n      <Button title=\"Animate\" />\n      <Animated.Text style={{ opacity: value.current, fontSize: 42 }}>\n        Hello!\n      </Animated.Text>\n    </>\n  )\n}`}\n      />\n      <h2>3. Animer !</h2>\n      <p>\n        Choisissez une fonction d’animation, comme{\" \"}\n        <span className=\"code\">Animated.timing</span>, et appellez\n        <span className=\"code\">.start()</span>. L’animation dois se déclencher\n        quand on clique sur le bouton.\n      </p>\n      <p>\n        On veut utiliser l’option <span className=\"code\">useNativeDriver</span>{\" \"}\n        dès que possible – Ça améliore considérablement les performances, mais\n        ne peut être utilisé que sur des propriétés qui n’affectent pas la mise\n        en page.\n      </p>\n      <p>\n        Pour déplacer un élément, ou changer ses dimensions, on préfèrera\n        utiliser la propriété <span className=\"code\">transform</span>.<br />\n        Ex.{\" \"}\n        <span className=\"code\">\n          {\"style={{ transform: [{ translateX: value }] }}\"}\n        </span>\n      </p>\n      <blockquote>N’oubliez pas d’appeler .start()!</blockquote>\n      <Playground\n        code={`import React, { useRef } from 'react'\nimport { Animated, Button } from 'react-native'\n\nexport default function MyComponent() {\n  const value = useRef(new Animated.Value(0))\n\n  return (\n    <>\n      <Button\n        title=\"Animate\"\n        onPress={() => {\n          const animation = Animated.timing(value.current, {\n            toValue: 1,\n            useNativeDriver: true,\n          })\n\n          animation.start()\n        }}\n      />\n      <Animated.Text style={{ opacity: value.current, fontSize: 42 }}>\n        Hello!\n      </Animated.Text>\n    </>\n  )\n}`}\n      />\n      <h2>Interpolation</h2>\n      <p>\n        Pour des animations plus complexes, on peut n’utiliser qu’une\n        <span className=\"code\">Animated.Value</span>, mais l’interpoler dans\n        différentes régions pour d’autres styles.\n      </p>\n      <Playground\n        code={`import React, { useRef } from 'react'\nimport { Animated, Button } from 'react-native'\n\nexport default function MyComponent() {\n  const value = useRef(new Animated.Value(0.1))\n\n  return (\n    <>\n      <Button\n        title=\"Animate\"\n        onPress={() => {\n          const animation = Animated.timing(value.current, {\n            toValue: 1,\n            useNativeDriver: true,\n          })\n\n          animation.start()\n        }}\n      />\n      <Animated.Text\n        style={{\n          opacity: value.current,\n          fontSize: 42,\n          transform: [\n            {\n              translateY: value.current.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, 400],\n              }),\n            },\n          ],\n        }}\n      >\n        Hello!\n      </Animated.Text>\n    </>\n  )\n}`}\n      />\n      <h2>Autres Animations</h2>\n      <p>\n        Il y a d’autres animations que <span className=\"code\">timing</span> :{\" \"}\n        <span className=\"code\">delay</span> et{\" \"}\n        <span className=\"code\">spring</span>. On peut aussi changer la fonction\n        de easing, créer des séquences, avoir plusieurs animations en parallèle…\n        Il y a aussi d’autre opérations que l’interpolation.\n      </p>\n      <p>\n        La{\" \"}\n        <a\n          href=\"https://reactnative.dev/docs/animated\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          documentation\n        </a>{\" \"}\n        couvre tout ce qui est disponible.\n      </p>\n      <BottomButtons\n        backTo=\"/application-development/state\"\n        backLabel=\"État global et persitance\"\n        nextTo=\"/application-development/sensors\"\n        nextLabel=\"Capteurs\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BottomButtons from \"../../components/BottomButtons\";\nimport Playground from \"../../components/Playground\";\n\nexport default function Sensors() {\n  return (\n    <div className=\"w-full\">\n      <h1>Capteurs</h1>\n      <p>\n        Comme pour la navigation et la persistance, à cause des trop grandes\n        différences entre les plateformes, React Native ne fourni pas de module\n        dédié aux capteurs.\n      </p>\n      <p>\n        Mais il y a{\" \"}\n        <a\n          clasName=\"code\"\n          href=\"https://react-native-sensors.github.io/docs/Installation.html\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          react-native-sensors\n        </a>{\" \"}\n        !\n      </p>\n      <p>Ce module donne accès à&nbsp;:</p>\n      <ul>\n        <li>\n          <span className=\"code\">accelerometer</span> – accélération\n        </li>\n        <li>\n          <span className=\"code\">gyroscope</span> – rotation\n        </li>\n        <li>\n          <span className=\"code\">magnetometer</span> – bousole\n        </li>\n        <li>\n          <span className=\"code\">barometer</span> - pression atmosphérique\n        </li>\n      </ul>\n      <p>\n        <span className=\"code\">react-native-sensors</span> exporte des\n        observables RxJs mais il est aisé de les emballer dans des hooks. Par\n        exemple&nbsp;\n      </p>\n      <Playground\n        noPlayer\n        height={350}\n        code={`import { accelerometer } from 'react-native-sensors'\nimport { useState, useEffect } from 'react'\n\nexport default function useAccelerometer() {\n  const [data, setData] = useState(null)\n\n  useEffect(() => {\n     const subscription = accelerometer.subscribe(d => setData(d))\n\n     return () => subscription.unsubscribe()\n  }, [])\n\n  return data\n}`}\n      />\n      <BottomButtons\n        backTo=\"/application-development/animations\"\n        backLabel=\"Animations\"\n        nextTo=\"/application-development/permissions\"\n        nextLabel=\"Permissions\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport BottomButtons from \"../../components/BottomButtons\";\n\nimport Playground from \"../../components/Playground\";\n\nexport default function Geoloc() {\n  return (\n    <div className=\"w-full\">\n      <h1>Permissions</h1>\n      <p>\n        Les platformes mobiles (iOS et Android) ont chacune leur façon de gérer\n        le consentement de l’utilisateur pour accéder aux capteurs,\n        géolocaliastion, données des contacts, etc…\n      </p>\n\n      <p>\n        Dans les deux cas, les fonctionnalités auxquelles on accède doivent être\n        déclarées à l’avance, et un dialogue de confirmation sera présenté à\n        l’utilisateur.\n      </p>\n\n      <h2>iOS</h2>\n\n      <p>\n        Pour iOS et macOS, c’est fait dans l’IDE d’Apple XCode, en activant ou\n        désactivant des <span className=\"code\">Entitlements</span>.\n      </p>\n\n      <h2>Android</h2>\n\n      <p>\n        Android nous demande plus de travail&nbsp;: il faut modifier les fichier\n        AndroidManifest.xml pour y déclarer les permissions à utiliser&nbsp;;\n        puis utiliser le module <span className=\"code\">PermissionsAndroid</span>{\" \"}\n        (voir{\" \"}\n        <a\n          href=\"https://reactnative.dev/docs/permissionsandroid\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          la documentation\n        </a>\n        ) pour personnaliser le message afficher à l’utilisateur.\n      </p>\n\n      <h2>Quand demander la permissions</h2>\n\n      <p>Deux écoles&nbsp;:</p>\n      <ul>\n        <li>\n          Au lancement de l’application. Mais s’il y en a beaucoup, ça peut être\n          un frein.\n        </li>\n        <li>\n          Au premier usage de la foncionnalité. Mais si ça arrive souvent, ça\n          peut gêner l’utilisateur…\n        </li>\n      </ul>\n\n      <BottomButtons\n        backTo=\"/application-development/sensors\"\n        backLabel=\"Capteurs\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function WhatYoullDo() {\n  return (\n    <div className=\"w-full\">\n      <h1>Ce que vous allez faire</h1>\n\n      <p>Une application météo, avec les fonctionnalités suivant</p>\n      <ol>\n        <li>\n          Une page pévisions : 7 jours, une image, une icone, les minimales, et\n          les maximales\n        </li>\n        <li>\n          Une page recherche : saisie, option géolocalisation, et liste des\n          résultats\n        </li>\n        <li>Une page favoris : liste des favoris</li>\n      </ol>\n\n      <p>\n        <img width=\"400\" src={`${process.env.PUBLIC_URL}/assets/home.png`} />\n      </p>\n      <p>\n        <img width=\"400\" src={`${process.env.PUBLIC_URL}/assets/search.png`} />\n      </p>\n      <p>\n        <img\n          width=\"400\"\n          src={`${process.env.PUBLIC_URL}/assets/favorits.png`}\n        />\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Menu from \"./components/Menu\";\n\nimport Home from \"./pages/Home\";\n\nimport Environment from \"./pages/Environment\";\n\nimport SpecificComponents from \"./pages/SpecificComponents\";\nimport ViewAndStyleSheet from \"./pages/SpecificComponents/View\";\nimport Text from \"./pages/SpecificComponents/Text\";\nimport Image from \"./pages/SpecificComponents/Image\";\nimport TextInput from \"./pages/SpecificComponents/TextInput\";\nimport Button from \"./pages/SpecificComponents/Button\";\nimport Touchables from \"./pages/SpecificComponents/Touchables\";\nimport Lists from \"./pages/SpecificComponents/Lists\";\n\nimport ReactHooks from \"./pages/ReactHooks\";\nimport UseState from \"./pages/ReactHooks/UseState\";\nimport UseEffect from \"./pages/ReactHooks/UseEffect\";\nimport UseRef from \"./pages/ReactHooks/UseRef\";\nimport Others from \"./pages/ReactHooks/Others\";\nimport Custom from \"./pages/ReactHooks/Custom\";\n\nimport ApplicationDeveloppement from \"./pages/ApplicationDeveloppement\";\nimport ProjectStructure from \"./pages/ApplicationDeveloppement/ProjectStructure\";\nimport AndroidAndiOS from \"./pages/ApplicationDeveloppement/AndroidAndiOS\";\nimport Navigation from \"./pages/ApplicationDeveloppement/Navigation\";\nimport State from \"./pages/ApplicationDeveloppement/State\";\nimport Animations from \"./pages/ApplicationDeveloppement/Animations\";\nimport Sensors from \"./pages/ApplicationDeveloppement/Sensors\";\nimport Permissions from \"./pages/ApplicationDeveloppement/Permissions\";\n\nimport WhatYoullDo from \"./pages/WhatYoullDo\";\n\nfunction App() {\n  return (\n    <div className=\"flex App\">\n      <Router>\n        <Menu />\n        <div className=\"w-5/6 p-16 px-48\">\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n\n            <Route path=\"/environment\">\n              <Environment />\n            </Route>\n\n            {/* Specific Components */}\n            <Route exact path=\"/specific-components\">\n              <SpecificComponents />\n            </Route>\n            <Route exact path=\"/specific-components/view\">\n              <ViewAndStyleSheet />\n            </Route>\n            <Route exact path=\"/specific-components/text\">\n              <Text />\n            </Route>\n            <Route exact path=\"/specific-components/image\">\n              <Image />\n            </Route>\n            <Route exact path=\"/specific-components/text-input\">\n              <TextInput />\n            </Route>\n            <Route exact path=\"/specific-components/button\">\n              <Button />\n            </Route>\n            <Route exact path=\"/specific-components/touchables\">\n              <Touchables />\n            </Route>\n            <Route exact path=\"/specific-components/lists\">\n              <Lists />\n            </Route>\n\n            {/* React Hooks */}\n            <Route exact path=\"/react-hooks\">\n              <ReactHooks />\n            </Route>\n            <Route exact path=\"/react-hooks/usestate\">\n              <UseState />\n            </Route>\n            <Route exact path=\"/react-hooks/useeffect\">\n              <UseEffect />\n            </Route>\n            <Route exact path=\"/react-hooks/useref\">\n              <UseRef />\n            </Route>\n            <Route exact path=\"/react-hooks/others\">\n              <Others />\n            </Route>\n            <Route exact path=\"/react-hooks/custom\">\n              <Custom />\n            </Route>\n\n            <Route exact path=\"/application-development\">\n              <ApplicationDeveloppement />\n            </Route>\n            <Route exact path=\"/application-development/project-structure\">\n              <ProjectStructure />\n            </Route>\n            <Route exact path=\"/application-development/android-and-ios\">\n              <AndroidAndiOS />\n            </Route>\n            <Route exact path=\"/application-development/navigation\">\n              <Navigation />\n            </Route>\n            <Route exact path=\"/application-development/state\">\n              <State />\n            </Route>\n            <Route exact path=\"/application-development/animations\">\n              <Animations />\n            </Route>\n            <Route exact path=\"/application-development/sensors\">\n              <Sensors />\n            </Route>\n            <Route exact path=\"/application-development/permissions\">\n              <Permissions />\n            </Route>\n            <Route exact path=\"/what-you-ll-do\">\n              <WhatYoullDo />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}